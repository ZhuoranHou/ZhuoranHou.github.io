<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhuoran Hou</title>
    <link>https://ZhuoranHou.github.io/</link>
      <atom:link href="https://ZhuoranHou.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Zhuoran Hou</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 16 Nov 2020 19:51:25 -0500</lastBuildDate>
    <image>
      <url>https://ZhuoranHou.github.io/images/icon_hu6b1daddad367c9d793e5607d0ae1cd4a_68195_512x512_fill_lanczos_center_3.png</url>
      <title>Zhuoran Hou</title>
      <link>https://ZhuoranHou.github.io/</link>
    </image>
    
    <item>
      <title>Dashboard for COVID-19 in US</title>
      <link>https://ZhuoranHou.github.io/project/covid-dashboard/</link>
      <pubDate>Mon, 16 Nov 2020 19:51:25 -0500</pubDate>
      <guid>https://ZhuoranHou.github.io/project/covid-dashboard/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dashboard for COVID-19 in US</title>
      <link>https://ZhuoranHou.github.io/post/covid-dashboard/</link>
      <pubDate>Mon, 16 Nov 2020 19:50:57 -0500</pubDate>
      <guid>https://ZhuoranHou.github.io/post/covid-dashboard/</guid>
      <description>&lt;p&gt;The data project is a dashboard that provided updated COVID-19 information and presents model results.&lt;/p&gt;
&lt;p&gt;The target audience of  our dashboard is the general audience who want to know some COVID-19 information in US and what factors influence case growth rate. Thus, we added a lot of explanations in the dashboard using non-technical wording and omitted technical details of the model.&lt;/p&gt;
&lt;h3 id=&#34;project-goals&#34;&gt;Project goals&lt;/h3&gt;
&lt;p&gt;We first discussed the goals of our project and decided to finalize it when we had the data. After the data collection, here are the goals of the project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build machine learning models to predict daily case growth rate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore what factors influence case growth rate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore the effect of Policy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analyze what impact infection and death rate from individual case level&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build a dashboard that provided updated COVID19 information and presents model results&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-collection-and-data-cleaning&#34;&gt;Data collection and data cleaning&lt;/h3&gt;
&lt;p&gt;We mainly collected data from US CDC, a policy database supported by researchers in Boston University and US census bureau. Here are the main data resources we used in the project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;COVID-19 cases in US from January till now&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;COVID-19 patient-level data&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://data.cdc.gov/Case-Surveillance/COVID-19-Case-Surveillance-Public-Use-Data/vbim-akqf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://data.cdc.gov/Case-Surveillance/COVID-19-Case-Surveillance-Public-Use-Data/vbim-akqf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hospital resources (Hospital Capacity by State)&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.cdc.gov/nhsn/covid19/report-patient-impact.html#anchor_1594393649&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cdc.gov/nhsn/covid19/report-patient-impact.html#anchor_1594393649&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;COVID-19 US State Policy&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/USCOVIDpolicy/COVID-19-US-State-Policy-Database&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/USCOVIDpolicy/COVID-19-US-State-Policy-Database&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State demographic information&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.census.gov/data/developers/data-sets/acs-1year.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.census.gov/data/developers/data-sets/acs-1year.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We download all the data through API from the website or just through the URL,  and cleaned the data to make it at least meet the requirement of 1NF. Also, we created a codebook for each dataset.&lt;/p&gt;
&lt;h3 id=&#34;data-analysis-and-modeling&#34;&gt;Data analysis and Modeling&lt;/h3&gt;
&lt;p&gt;There are three parts of our analysis:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Comparison of the influence of policies on the increase rate of case among states&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this part, we try to explore the effectiveness of policies of different states on controlling COVID-19 cases. After discussion, we chose four main policy: &lt;strong&gt;stay at home order, face mask mandatory, restaurant close and business close&lt;/strong&gt;. We calculated the average increase rate of total cases on each state 7/15 days before and after the implementation date of the each policy. 7 days represents short term while 15 days represents long term.&lt;/p&gt;
&lt;p&gt;We also compare the state level increase rate and the increase rate of US to asses the performance of the state government.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.Predict Covid19 Case Growth Rate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since cases changes as time goes, we first considered LSTM (Long short-term memory) recurrent neural network (RNN) model and time series model, but the results were not good.  Then, we decided only to consider increase rate and added several lags in the model to denote the effect of time instead of predicting new cases. After that, we used &lt;strong&gt;random forest&lt;/strong&gt; models to train the data and made predictions.&lt;/p&gt;
&lt;p&gt;There were two levels of analysis: US level and states level. For US level, we used &lt;strong&gt;hospital capacity data&lt;/strong&gt; ( number of inpatient beds, number of ICU beds, etc.), &lt;strong&gt;state demographic information&lt;/strong&gt; and &lt;strong&gt;policies&lt;/strong&gt; to predict increase rate. For the state level, we only use hospital capacity data and policy data since state demographic information were &lt;em&gt;constants&lt;/em&gt; for a specific state and would not change over time. We used data before July as training datasets and data after July as test datasets.&lt;/p&gt;
&lt;p&gt;The test RMSE (root mean square error) of US level is 0.0107, which is quite low. We also trained a random forest model for each state.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.Individual Level Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since the original dataset from US CDC has a large number of individual observations (over 5 million), we transformed the data into &lt;strong&gt;SQL database&lt;/strong&gt; and performed &lt;strong&gt;stratified sampling&lt;/strong&gt; based on the age group (5% of the data).&lt;/p&gt;
&lt;p&gt;The treemap of the original data (we extracted 1.5M observations):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tree2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The treemap of the data after sampling:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tree.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can see that we maintained the age structure by this sampling method. Then, we explored how age, sex and race influence the infection cases and fatality cases.&lt;/p&gt;
&lt;h3 id=&#34;data-visualization-and-development-of-data-product&#34;&gt;Data visualization and Development of data product&lt;/h3&gt;
&lt;p&gt;We used &lt;em&gt;&lt;strong&gt;streamlit&lt;/strong&gt;&lt;/em&gt; to build a dashboard to show our data and analysis results.&lt;/p&gt;
&lt;p&gt;There are four parts of the dashboard:&lt;/p&gt;
&lt;p&gt;1.Overview of the COVID-19 cases and death cases by states in US (updated everyday)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The trend of new cases and new death cases from January till now by state.&lt;/li&gt;
&lt;li&gt;Map plot showing total cases,  new cases, cases per million people, death per million people based the latest data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;part1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;2.Comparison of the influence of policies on the increase rate of case among states&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Top 5 states with worse/best policy performance based on 7/15 day ranges&lt;/li&gt;
&lt;li&gt;Map plot showing the relative Increase Rate of individual states compare to the US&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;part2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;3.Predict case growth rate using hospital capacity, state demographic information and related policies based on Random forest.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature Importance plot for the entire U.S. level&lt;/li&gt;
&lt;li&gt;Actual VS Predicted daily case growth rate for each state&lt;/li&gt;
&lt;li&gt;Feature Importance plot for the individual state level&lt;/li&gt;
&lt;li&gt;Pie chart showing state&amp;rsquo;s Sex ratio, race ratio&lt;/li&gt;
&lt;li&gt;Bar plot of age groups, data table of the state&amp;rsquo;s demographic information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;US level:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;part3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State level:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;part3_2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;4.Explore how sex, age race and commodity affect the development of COVID-19 from a individual level&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sampling process of original data&lt;/li&gt;
&lt;li&gt;Tree plot of data specified by age_group&lt;/li&gt;
&lt;li&gt;Death cases count/rate for each age group; Infection cases count/rate for each age group (faceted by gender)&lt;/li&gt;
&lt;li&gt;Death cases count/rate for each race; Infection cases count/rate for each race (faceted by gender)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;part4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt;
&lt;p&gt;We deployed the dashboard at this 
&lt;a href=&#34;https://github.com/QianyinLu/finalproject1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; .&lt;strong&gt;Our final data product can be access from 
&lt;a href=&#34;https://final-project-823.herokuapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep learning for insects images classification</title>
      <link>https://ZhuoranHou.github.io/post/deep_learning_for_insects_images/</link>
      <pubDate>Mon, 09 Nov 2020 09:53:04 -0500</pubDate>
      <guid>https://ZhuoranHou.github.io/post/deep_learning_for_insects_images/</guid>
      <description>&lt;h3 id=&#34;how-the-neural-network-classified-the-images&#34;&gt;How the neural network classified the images&lt;/h3&gt;
&lt;p&gt;Image classification means that we use artificial intelligence (here we use deep learning) to automatically identify objects, people in images, and classify it to different labels.&lt;/p&gt;
&lt;p&gt;Images are composed of pixels, and these are the features of the images. Colors could be represented as RGB values (a combination of red, green and blue ranging from 0 to 255). When computer load images, it first convert images into arrays.&lt;/p&gt;
&lt;p&gt;Neural network (especially in deep learning) has multiple layers. The first layer usually takes in all the pixels within an image. And then, different filters are applied to the image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cnn1.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;Credit: 
&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Convolutional_Neural_Network_NeuralNetworkFilter.gif&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;commons.wikimedia.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We use a &amp;ldquo;convolutional layer&amp;rdquo; to extracting features from images, that where we have the commonly used term  
&lt;a href=&#34;https://en.wikipedia.org/wiki/Convolutional_neural_network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Convolutional Neural Network&lt;/a&gt; (CNN) in image classification.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cnn2.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;Credit: 
&lt;a href=&#34;https://commons.wikimedia.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;commons.wikimedia.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After we extract information from the convolutional layer, we will apply a pooling layer to the matrix. The main idea of &amp;ldquo;pooling&amp;rdquo; is to drop out redundant information and avoid overfitting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Pooling_schematic.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;The final layer before output is usually a dense layer or a fully connected layer, which is a linear operation on the layer’s input vector.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Credit to:
&lt;a href=&#34;https://cs231n.github.io/neural-networks-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stanford CS class&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;an-example-based-on-insects-images&#34;&gt;An example based on insects images&lt;/h3&gt;
&lt;p&gt;Train a deep learning model to classify beetles, cockroaches and dragonflies using these images(
&lt;a href=&#34;https://www.dropbox.com/s/fn73sj2e6c9rhf6/insects.zip?dl=0%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.dropbox.com/s/fn73sj2e6c9rhf6/insects.zip?dl=0)&lt;/a&gt;. Note: Original images from 
&lt;a href=&#34;https://www.insectimages.org/index.cfm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.insectimages.org/index.cfm&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;explore-the-dataset&#34;&gt;Explore the dataset&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Importing all necessary libraries 
import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pathlib
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data_train_dir = pathlib.Path(&#39;insects\\train&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data_test_dir = pathlib.Path(&#39;insects\\test&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data_train_dir
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;WindowsPath(&#39;C:/your_path/insects/train&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;image_count = len(list(data_train_dir.glob(&#39;*/*.jpg&#39;)))
print(image_count)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1019
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;image_count = len(list(data_test_dir.glob(&#39;*/*.jpg&#39;)))
print(image_count)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;180
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are 1019 figures for training and 180 figures for testing.&lt;br&gt;
&lt;br&gt;
Let&amp;rsquo;s take a look at the a sample figure.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dragonflies = list(data_train_dir.glob(&#39;dragonflies/*&#39;))
PIL.Image.open(str(dragonflies[0]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_15_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;load-using-keraspreprocessing&#34;&gt;Load using keras.preprocessing&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;img_width, img_height = 256, 224
batch_size = 32
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_train_dir,
  image_size=(img_height, img_width),
  batch_size=batch_size)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Found 1019 files belonging to 3 classes.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;val_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_test_dir,
  image_size=(img_height, img_width),
  batch_size=batch_size)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Found 180 files belonging to 3 classes.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class_names = train_ds.class_names
print(class_names)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;beetles&#39;, &#39;cockroach&#39;, &#39;dragonflies&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for image_batch, labels_batch in train_ds:
    print(image_batch.shape)
    print(labels_batch.shape)
    break
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(32, 224, 256, 3)
(32,)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The image_batch is a tensor of the shape (32, 224, 256, 3). This is a batch of 32 images of shape 224x256x3&lt;/p&gt;
&lt;h3 id=&#34;standardize-the-data&#34;&gt;Standardize the data&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;normalization_layer = layers.experimental.preprocessing.Rescaling(1./255)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;normalized_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
image_batch, labels_batch = next(iter(normalized_ds))
first_image = image_batch[0]
# Notice the pixels values are now in `[0,1]`.
print(np.min(first_image), np.max(first_image)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.0 0.9191305
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-the-model&#34;&gt;Create the model&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num_classes = 3

model = Sequential([
  layers.experimental.preprocessing.Rescaling(1./255, input_shape=(img_height, img_width, 3)),
  layers.Conv2D(16, 3, padding=&#39;same&#39;, activation=&#39;relu&#39;),
  layers.MaxPooling2D(),
  layers.Conv2D(32, 3, padding=&#39;same&#39;, activation=&#39;relu&#39;),
  layers.MaxPooling2D(),
  layers.Conv2D(64, 3, padding=&#39;same&#39;, activation=&#39;relu&#39;),
  layers.MaxPooling2D(),
  layers.Flatten(),
  layers.Dense(128, activation=&#39;relu&#39;),
  layers.Dense(num_classes)
])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I choose the optimizers.Adam optimizer and losses.SparseCategoricalCrossentropy loss function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model.compile(optimizer=&#39;adam&#39;,
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=[&#39;accuracy&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model.summary()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Model: &amp;quot;sequential&amp;quot;
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
rescaling_1 (Rescaling)      (None, 224, 256, 3)       0         
_________________________________________________________________
conv2d (Conv2D)              (None, 224, 256, 16)      448       
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 112, 128, 16)      0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 112, 128, 32)      4640      
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 56, 64, 32)        0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 56, 64, 64)        18496     
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 28, 32, 64)        0         
_________________________________________________________________
flatten (Flatten)            (None, 57344)             0         
_________________________________________________________________
dense (Dense)                (None, 128)               7340160   
_________________________________________________________________
dense_1 (Dense)              (None, 3)                 387       
=================================================================
Total params: 7,364,131
Trainable params: 7,364,131
Non-trainable params: 0
_________________________________________________________________
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;train-the-model&#34;&gt;Train the model&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;epochs=10
history = model.fit(
  train_ds,
  validation_data=val_ds,
  epochs=epochs
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Epoch 1/10
32/32 [==============================] - 36s 1s/step - loss: 0.9313 - accuracy: 0.6340 - val_loss: 0.6570 - val_accuracy: 0.7667
Epoch 2/10
32/32 [==============================] - 37s 1s/step - loss: 0.4232 - accuracy: 0.8469 - val_loss: 0.5344 - val_accuracy: 0.8167
Epoch 3/10
32/32 [==============================] - 36s 1s/step - loss: 0.3108 - accuracy: 0.8803 - val_loss: 0.2941 - val_accuracy: 0.8944
Epoch 4/10
32/32 [==============================] - 35s 1s/step - loss: 0.1886 - accuracy: 0.9274 - val_loss: 0.1562 - val_accuracy: 0.9389
Epoch 5/10
32/32 [==============================] - 36s 1s/step - loss: 0.1031 - accuracy: 0.9617 - val_loss: 0.1012 - val_accuracy: 0.9611
Epoch 6/10
32/32 [==============================] - 36s 1s/step - loss: 0.0704 - accuracy: 0.9725 - val_loss: 0.0514 - val_accuracy: 0.9889
Epoch 7/10
32/32 [==============================] - 37s 1s/step - loss: 0.0435 - accuracy: 0.9902 - val_loss: 0.0399 - val_accuracy: 0.9944
Epoch 8/10
32/32 [==============================] - 38s 1s/step - loss: 0.0319 - accuracy: 0.9892 - val_loss: 0.1055 - val_accuracy: 0.9722
Epoch 9/10
32/32 [==============================] - 38s 1s/step - loss: 0.0284 - accuracy: 0.9921 - val_loss: 0.0279 - val_accuracy: 0.9944
Epoch 10/10
32/32 [==============================] - 39s 1s/step - loss: 0.0155 - accuracy: 0.9971 - val_loss: 0.0109 - val_accuracy: 0.9944
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;visualize-training-results&#34;&gt;Visualize training results&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;acc = history.history[&#39;accuracy&#39;]
val_acc = history.history[&#39;val_accuracy&#39;]

loss = history.history[&#39;loss&#39;]
val_loss = history.history[&#39;val_loss&#39;]

epochs_range = range(epochs)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label=&#39;Training Accuracy&#39;)
plt.plot(epochs_range, val_acc, label=&#39;Validation Accuracy&#39;)
plt.legend(loc=&#39;lower right&#39;)
plt.title(&#39;Training and Validation Accuracy&#39;)

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label=&#39;Training Loss&#39;)
plt.plot(epochs_range, val_loss, label=&#39;Validation Loss&#39;)
plt.legend(loc=&#39;upper right&#39;)
plt.title(&#39;Training and Validation Loss&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_34_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The model achieved quite high accuracy (&lt;strong&gt;99.44%&lt;/strong&gt;).&lt;/p&gt;
&lt;h3 id=&#34;save-the-model&#34;&gt;Save the model&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model.save_weights(&#39;model_saved.h5&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;p&gt;1.https://www.tensorflow.org/tutorials/images/classification &lt;br&gt;
2.https://stackabuse.com/image-recognition-in-python-with-tensorflow-and-keras/ &lt;br&gt;
3.https://cs231n.github.io/neural-networks-1/ &lt;br&gt;
4.http://deeplearning.stanford.edu/tutorial/supervised/Pooling/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep learning for insects images classification</title>
      <link>https://ZhuoranHou.github.io/project/deep_learning_for_insects_images/</link>
      <pubDate>Mon, 09 Nov 2020 09:52:22 -0500</pubDate>
      <guid>https://ZhuoranHou.github.io/project/deep_learning_for_insects_images/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dashboard for PhDs dataset</title>
      <link>https://ZhuoranHou.github.io/project/dashboard/</link>
      <pubDate>Mon, 05 Oct 2020 23:26:07 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/project/dashboard/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dashboard for PhDs dataset</title>
      <link>https://ZhuoranHou.github.io/post/dashboard/</link>
      <pubDate>Mon, 05 Oct 2020 23:25:50 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/post/dashboard/</guid>
      <description>&lt;p&gt;The task is to download data of PhDs awarded in the US. Do some analysis in pandas. Make a dashboard visualization of a few interesting aspects of the data using dash or streamlit.
dataset: 
&lt;a href=&#34;https://ncses.nsf.gov/pubs/nsf19301/data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://ncses.nsf.gov/pubs/nsf19301/data&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-read-the-dataset-and-data-cleaning&#34;&gt;1. Read the dataset and data cleaning&lt;/h3&gt;
&lt;p&gt;For this collection of datasets, I want to explore the number of doctorate recipients by major field of study, sex and citizenship in the selected years from 1987 to 2017. &lt;br&gt;
Thus, I planed to explore table 14 and table 17.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;--data-cleaning-for-table-14&#34;&gt;- Data cleaning for table 14&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1 = pd.read_excel(&#39;D:\\3.Duke\\course\\Year_2\\semester_1\\2_Bios823\\HW\\HW6\\data_tables\\sed17-sr-tab014.xlsx&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Choose columnes that we are interested in.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1 = df1.iloc[7:,[0,1,3,5,7,9,11,13]]   
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1.columns = [&#39;Field of study and sex&#39;,&#39;1987&#39;,&#39;1992&#39;,&#39;1997&#39;,&#39;2002&#39;,&#39;2007&#39;,&#39;2012&#39;,&#39;2017&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1[&#39;Field of study and sex&#39;][7] = &#39;Life sciences&#39;  ## rename some field names
df1[&#39;Field of study and sex&#39;][28] = &#39;Other&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1 = df1.reset_index().drop(columns=[&#39;index&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1[&#39;Field of study&#39;] = df1.iloc[::3,0:1][&#39;Field of study and sex&#39;].repeat(repeats = 3).reset_index().drop(columns=[&#39;index&#39;])
df1.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Field of study and sex&lt;/th&gt;
      &lt;th&gt;1987&lt;/th&gt;
      &lt;th&gt;1992&lt;/th&gt;
      &lt;th&gt;1997&lt;/th&gt;
      &lt;th&gt;2002&lt;/th&gt;
      &lt;th&gt;2007&lt;/th&gt;
      &lt;th&gt;2012&lt;/th&gt;
      &lt;th&gt;2017&lt;/th&gt;
      &lt;th&gt;Field of study&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
      &lt;td&gt;5783&lt;/td&gt;
      &lt;td&gt;7141&lt;/td&gt;
      &lt;td&gt;8365&lt;/td&gt;
      &lt;td&gt;8465&lt;/td&gt;
      &lt;td&gt;10694&lt;/td&gt;
      &lt;td&gt;11949&lt;/td&gt;
      &lt;td&gt;12587&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;3747&lt;/td&gt;
      &lt;td&gt;4322&lt;/td&gt;
      &lt;td&gt;4613&lt;/td&gt;
      &lt;td&gt;4443&lt;/td&gt;
      &lt;td&gt;5197&lt;/td&gt;
      &lt;td&gt;5335&lt;/td&gt;
      &lt;td&gt;5629&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;2036&lt;/td&gt;
      &lt;td&gt;2819&lt;/td&gt;
      &lt;td&gt;3752&lt;/td&gt;
      &lt;td&gt;4022&lt;/td&gt;
      &lt;td&gt;5497&lt;/td&gt;
      &lt;td&gt;6614&lt;/td&gt;
      &lt;td&gt;6958&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
      &lt;td&gt;3811&lt;/td&gt;
      &lt;td&gt;4486&lt;/td&gt;
      &lt;td&gt;4522&lt;/td&gt;
      &lt;td&gt;3871&lt;/td&gt;
      &lt;td&gt;4955&lt;/td&gt;
      &lt;td&gt;5414&lt;/td&gt;
      &lt;td&gt;6079&lt;/td&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;3177&lt;/td&gt;
      &lt;td&gt;3545&lt;/td&gt;
      &lt;td&gt;3489&lt;/td&gt;
      &lt;td&gt;2812&lt;/td&gt;
      &lt;td&gt;3447&lt;/td&gt;
      &lt;td&gt;3684&lt;/td&gt;
      &lt;td&gt;4068&lt;/td&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Make the table tidy (into long form)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2 = pd.melt(df1, id_vars=[&#39;Field of study and sex&#39;,&#39;Field of study&#39;],var_name=&#39;year&#39;, value_name=&#39;number&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.loc[~df2[&#39;Field of study and sex&#39;].isin([&#39;Male&#39;,&#39;Female&#39;]),&#39;Field of study and sex&#39;] = &#39;All&#39;
df2 = df2.rename(columns={&amp;quot;Field of study and sex&amp;quot;: &amp;quot;sex&amp;quot;})
df2[&amp;quot;number&amp;quot;] = df2[&amp;quot;number&amp;quot;].astype(int)
df2[&amp;quot;year&amp;quot;] = df2[&amp;quot;year&amp;quot;].astype(int)
df2.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;Field of study&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;All&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;5783&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;3747&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;2036&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;All&lt;/td&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;3811&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;3177&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Create a small subset that only contains overall information.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2a = df2[df2[&#39;sex&#39;] == &#39;All&#39;].reset_index().drop(columns=[&#39;index&#39;])
df2a.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;Field of study&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;All&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;5783&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;All&lt;/td&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;3811&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;All&lt;/td&gt;
      &lt;td&gt;Mathematics and computer sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;1189&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;All&lt;/td&gt;
      &lt;td&gt;Psychology and social sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;6063&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;All&lt;/td&gt;
      &lt;td&gt;Engineering&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;3712&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Create a small subset that contains information by sex.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2 = (
    df2[df2[&#39;sex&#39;].isin([&#39;Male&#39;,&#39;Female&#39;])].
    reset_index().drop(columns=[&#39;index&#39;])
)

df2.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;Field of study&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;3747&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;2036&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;3177&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;634&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Mathematics and computer sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;999&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;--data-cleaning-for-table-17&#34;&gt;- Data cleaning for table 17&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;The data cleaning for table 17 is similar to that of table 14.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df4 = pd.read_excel(&#39;D:\\3.Duke\\course\\Year_2\\semester_1\\2_Bios823\\HW\\HW6\\data_tables\\sed17-sr-tab017.xlsx&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df4 = pd.read_excel(&#39;D:\\3.Duke\\course\\Year_2\\semester_1\\2_Bios823\\HW\\HW6\\data_tables\\sed17-sr-tab017.xlsx&#39;)
df4 = df4.iloc[7:,:]
df4.columns = [&#39;Field of study and citizenship&#39;,&#39;1987&#39;,&#39;1992&#39;,&#39;1997&#39;,&#39;2002&#39;,&#39;2007&#39;,&#39;2012&#39;,&#39;2017&#39;]
df4[&#39;Field of study and citizenship&#39;][7] = &#39;Life sciences&#39;
df4[&#39;Field of study and citizenship&#39;][35] = &#39;Other&#39;
df4 = df4.reset_index().drop(columns=[&#39;index&#39;])
df4[&#39;Field of study&#39;] = df4.iloc[::4,0:1][&#39;Field of study and citizenship&#39;].repeat(repeats = 4).reset_index().drop(columns=[&#39;index&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df4[&#39;Field of study and citizenship&#39;][7] = &#39;Life sciences&#39;
df4[&#39;Field of study and citizenship&#39;][35] = &#39;Other&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df5 = pd.melt(df4, id_vars=[&#39;Field of study and citizenship&#39;,&#39;Field of study&#39;],var_name=&#39;year&#39;, value_name=&#39;number&#39;)
df5 = df5.rename(columns={&amp;quot;Field of study and citizenship&amp;quot;: &amp;quot;citizenship&amp;quot;})
df5[&amp;quot;number&amp;quot;] = df5[&amp;quot;number&amp;quot;].astype(int)
df5[&amp;quot;year&amp;quot;] = df5[&amp;quot;year&amp;quot;].astype(int)
df5 = (
    df5[df5[&#39;citizenship&#39;].isin([&#39;U.S. citizen or permanent resident&#39;,&#39;Temporary visa holder&#39;,&#39;Unknown&#39;])].
    reset_index().drop(columns=[&#39;index&#39;])
)
df5.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;citizenship&lt;/th&gt;
      &lt;th&gt;Field of study&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;U.S. citizen or permanent resident&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;4529&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Temporary visa holder&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;939&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Unknown&lt;/td&gt;
      &lt;td&gt;Life sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;315&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;U.S. citizen or permanent resident&lt;/td&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;2657&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Temporary visa holder&lt;/td&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;929&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;2-create-dashboard-visualizations&#34;&gt;2. Create dashboard visualizations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Here I used the dash package to create dashboard in python.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.express as px
import jupyter_dash
from jupyter_dash import JupyterDash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Doctorate recipients by sex for selected years&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this chart, you can drag the slider to change the selected year.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;external_stylesheets = [&#39;https://codepen.io/chriddyp/pen/bWLwgP.css&#39;]

app = JupyterDash(__name__, external_stylesheets=external_stylesheets)

app.layout = html.Div([
    dcc.Graph(id=&#39;graph-with-slider&#39;),
    dcc.Slider(
        id=&#39;year-slider&#39;,
        min=df2[&#39;year&#39;].min(),
        max=df2[&#39;year&#39;].max(),
        value=df2[&#39;year&#39;].min(),
        marks={str(year): str(year) for year in df2[&#39;year&#39;].unique()},
        step=None
    )
])


@app.callback(
    Output(&#39;graph-with-slider&#39;, &#39;figure&#39;),
    [Input(&#39;year-slider&#39;, &#39;value&#39;)])
def update_figure(selected_year):
    filtered_df = df2[df2.year == selected_year]

    fig = px.bar(filtered_df, x=&amp;quot;Field of study&amp;quot;, y=&amp;quot;number&amp;quot;, color=&amp;quot;sex&amp;quot;, 
                 title=&amp;quot;Doctorate recipients by sex for selected years&amp;quot;)

    fig.update_layout(transition_duration=500)

    return fig

app.run_server(mode=&#39;inline&#39;,debug=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;fig1.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Trend of number of doctorate recipients by sex from 1987 to 2017&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the chart below, you can play with the dropdown box and checklist to interact with the figure.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;external_stylesheets = [&#39;https://codepen.io/chriddyp/pen/bWLwgP.css&#39;]

app = JupyterDash(__name__, external_stylesheets=external_stylesheets)

available_fields = df2[&#39;Field of study&#39;].unique()

app.layout = html.Div([
              
            html.Label(&#39;Field of study&#39;),
            dcc.Dropdown(
                id=&#39;Field&#39;,
                options=[{&#39;label&#39;: i, &#39;value&#39;: i} for i in available_fields],
                value=&#39;Life sciences&#39;
            ),
            
            
            html.Label(&#39;Sex&#39;),                        
            dcc.Checklist(
                id=&#39;sex&#39;,
                options=[{&#39;label&#39;: i, &#39;value&#39;: i} for i in [&#39;Female&#39;, &#39;Male&#39;]],
                value=[&#39;Female&#39;, &#39;Male&#39;]
            ) ,               
                   
            dcc.Graph(id=&#39;fields-graphic&#39;),

])

@app.callback(
    Output(&#39;fields-graphic&#39;, &#39;figure&#39;),
    [Input(&#39;Field&#39;, &#39;value&#39;),
     Input(&#39;sex&#39;, &#39;value&#39;)
     ])
def update_graph(field, sex):

    dff = df2[df2[&#39;Field of study&#39;] == field]
    
    if sex == []:
        fig = px.line()
    elif (sex == [&#39;Female&#39;]) or ( sex == [&#39;Male&#39;]) :
        fig = px.line(dff[dff[&#39;sex&#39;]== sex[0]], x=&amp;quot;year&amp;quot;, y=&amp;quot;number&amp;quot;)
    else:
        fig = px.line(dff, x=&amp;quot;year&amp;quot;, y=&amp;quot;number&amp;quot;, color=&#39;sex&#39;)

    
    return fig

app.run_server(mode=&#39;inline&#39;,debug=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;fig2.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Doctorate recipients by major field of study and their according sex and citizenship information summary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The charts below combine all the information in table 14 and table 17. When your mouse &lt;strong&gt;hover&lt;/strong&gt; on the bar chart on the left, the sex and citizenship information in the according field will show on the right simultaneously.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;external_stylesheets = [&#39;https://codepen.io/chriddyp/pen/bWLwgP.css&#39;]
app = JupyterDash(__name__, external_stylesheets=external_stylesheets)

available_years = df2a[&#39;year&#39;].unique()

app.layout = html.Div([
    html.Div([

        html.Div([
            dcc.Dropdown(
                id=&#39;year&#39;,
                options=[{&#39;label&#39;: i, &#39;value&#39;: i} for i in available_years],
                value=&#39;2017&#39;
            ),
      
        ],
        style={&#39;width&#39;: &#39;49%&#39;, &#39;display&#39;: &#39;inline-block&#39;})      
    
    ], style={
        &#39;borderBottom&#39;: &#39;thin lightgrey solid&#39;,
        &#39;backgroundColor&#39;: &#39;rgb(250, 250, 250)&#39;,
        &#39;padding&#39;: &#39;10px 5px&#39;
    }), 
     
    
    html.Div([
        dcc.Graph(
            id=&#39;allfield_barchart&#39;,
            hoverData={&#39;points&#39;: [{&#39;label&#39;: &#39;Life sciences&#39;}]}
        )
    ], style={ &#39;width&#39;: &#39;49%&#39;, &#39;display&#39;: &#39;inline-block&#39;, &#39;padding&#39;: &#39;0 20&#39;}),
    
   
    
    
    html.Div([
        dcc.Graph(id=&#39;sex-prop&#39;),
        dcc.Graph(id=&#39;citizen-prop&#39;),
    ], style={&#39;display&#39;: &#39;inline-block&#39;, &#39;width&#39;: &#39;49%&#39;})
    
   
])


@app.callback(
    Output(&#39;allfield_barchart&#39;, &#39;figure&#39;),
    [Input(&#39;year&#39;, &#39;value&#39;)
    ])
def update_graph(year_value):
    
    if year_value == None:
        fig = px.bar()
    else:    
        dff = df2a[df2a[&#39;year&#39;] == int(year_value)]
        fig = px.bar(dff, x=&amp;quot;Field of study&amp;quot;, y=&amp;quot;number&amp;quot;, template=&#39;seaborn&#39;,
                    title=&amp;quot;Number of Doctorate recipients by field in %s&amp;quot; % year_value)

        fig.update_layout(autosize= True, height=800 ,
                          margin={&#39;l&#39;: 20, &#39;b&#39;: 40, &#39;t&#39;: 40, &#39;r&#39;: 20}, hovermode=&#39;closest&#39;)

    return fig

@app.callback(
    Output(&#39;sex-prop&#39;, &#39;figure&#39;),
    [Input(&#39;allfield_barchart&#39;, &#39;hoverData&#39;),
    Input(&#39;year&#39;, &#39;value&#39;)
    ])
def update_sex_prop(hoverData, year_value):
    if year_value == None:
        fig = px.pie()
    else: 
        field_name = hoverData[&#39;points&#39;][0][&#39;label&#39;]
        dff =  df2[ (df2[&#39;year&#39;] == int(year_value)) &amp;amp; (df2[&#39;Field of study&#39;] == field_name ) ]
    
        #title = &#39;&amp;lt;b&amp;gt;{}&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;{}&#39;.format(country_name, xaxis_column_name)
        fig = px.pie(dff, values=&#39;number&#39;, names=&#39;sex&#39;,template=&#39;seaborn&#39;)
        
        fig.update_layout(legend=dict(orientation=&amp;quot;h&amp;quot;,
        yanchor=&amp;quot;bottom&amp;quot;,y=1.02,
        xanchor=&amp;quot;right&amp;quot;,x=1),
        title={&#39;text&#39;: &amp;quot;sex&amp;quot;,&#39;y&#39;:0.1, &#39;x&#39;:0.5})
    
    return fig


@app.callback(
    Output(&#39;citizen-prop&#39;, &#39;figure&#39;),
    [Input(&#39;allfield_barchart&#39;, &#39;hoverData&#39;),
    Input(&#39;year&#39;, &#39;value&#39;)
    ])
def update_sex_prop(hoverData, year_value):
    if year_value == None:
        fig = px.pie()
    else: 
        field_name = hoverData[&#39;points&#39;][0][&#39;label&#39;]
        dff =  df5[ (df5[&#39;year&#39;] == int(year_value)) &amp;amp; (df5[&#39;Field of study&#39;] == field_name ) ]
    
        #title = &#39;&amp;lt;b&amp;gt;{}&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;{}&#39;.format(country_name, xaxis_column_name)
        fig = px.pie(dff, values=&#39;number&#39;, names=&#39;citizenship&#39;,template=&#39;plotly&#39;)
        
        fig.update_layout(legend=dict(orientation=&amp;quot;h&amp;quot;,
        yanchor=&amp;quot;bottom&amp;quot;,y=1.02,
        xanchor=&amp;quot;right&amp;quot;,x=1),
        title={&#39;text&#39;: &amp;quot;citizenship&amp;quot;,&#39;y&#39;:0.1, &#39;x&#39;:0.5})
    
    return fig


app.run_server(mode=&#39;inline&#39;,debug=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;fig3.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Star Wars universe API data analysis</title>
      <link>https://ZhuoranHou.github.io/project/starwar/</link>
      <pubDate>Wed, 30 Sep 2020 20:58:11 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/project/starwar/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Star Wars universe API data analysis</title>
      <link>https://ZhuoranHou.github.io/post/starwar/</link>
      <pubDate>Wed, 30 Sep 2020 20:57:59 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/post/starwar/</guid>
      <description>&lt;p&gt;The task is : use the requests library, download all the people in the Star Wars universe using the Star Wars API (
&lt;a href=&#34;https://swapi.dev/documentation%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://swapi.dev/documentation)&lt;/a&gt;. Show the name of the oldest person (or robot or alien) and list the titles of all the films they appeared in.&lt;/p&gt;
&lt;h3 id=&#34;1-download-star-wars-universe-database&#34;&gt;1. Download Star Wars universe database&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests
import numpy as np
import pandas as pd
import os
import json
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;base_url = &#39;http://swapi.dev/api/&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;i = 1
urls=[]

while(True):
    urls.append(os.path.join(base_url, f&#39;people/{i}&#39;))
    if requests.get(os.path.join(base_url, f&#39;people/{i+1}&#39;)).json() == {&#39;detail&#39;: &#39;Not found&#39;}:
        i +=1
        if requests.get(os.path.join(base_url, f&#39;people/{i+1}&#39;)).json() == {&#39;detail&#39;: &#39;Not found&#39;}:
            break
    
    i +=1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(urls)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;82
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [requests.get(url).json() for url in urls]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[{&#39;name&#39;: &#39;Luke Skywalker&#39;,
  &#39;height&#39;: &#39;172&#39;,
  &#39;mass&#39;: &#39;77&#39;,
  &#39;hair_color&#39;: &#39;blond&#39;,
  &#39;skin_color&#39;: &#39;fair&#39;,
  &#39;eye_color&#39;: &#39;blue&#39;,
  &#39;birth_year&#39;: &#39;19BBY&#39;,
  &#39;gender&#39;: &#39;male&#39;,
  &#39;homeworld&#39;: &#39;http://swapi.dev/api/planets/1/&#39;,
  &#39;films&#39;: [&#39;http://swapi.dev/api/films/1/&#39;,
   &#39;http://swapi.dev/api/films/2/&#39;,
   &#39;http://swapi.dev/api/films/3/&#39;,
   &#39;http://swapi.dev/api/films/6/&#39;],
  &#39;species&#39;: [],
  &#39;vehicles&#39;: [&#39;http://swapi.dev/api/vehicles/14/&#39;,
   &#39;http://swapi.dev/api/vehicles/30/&#39;],
  &#39;starships&#39;: [&#39;http://swapi.dev/api/starships/12/&#39;,
   &#39;http://swapi.dev/api/starships/22/&#39;],
  &#39;created&#39;: &#39;2014-12-09T13:50:51.644000Z&#39;,
  &#39;edited&#39;: &#39;2014-12-20T21:17:56.891000Z&#39;,
  &#39;url&#39;: &#39;http://swapi.dev/api/people/1/&#39;},
 {&#39;name&#39;: &#39;C-3PO&#39;,
  &#39;height&#39;: &#39;167&#39;,
  &#39;mass&#39;: &#39;75&#39;,
  &#39;hair_color&#39;: &#39;n/a&#39;,
  &#39;skin_color&#39;: &#39;gold&#39;,
  &#39;eye_color&#39;: &#39;yellow&#39;,
  &#39;birth_year&#39;: &#39;112BBY&#39;,
  &#39;gender&#39;: &#39;n/a&#39;,
  &#39;homeworld&#39;: &#39;http://swapi.dev/api/planets/1/&#39;,
  &#39;films&#39;: [&#39;http://swapi.dev/api/films/1/&#39;,
   &#39;http://swapi.dev/api/films/2/&#39;,
   &#39;http://swapi.dev/api/films/3/&#39;,
   &#39;http://swapi.dev/api/films/4/&#39;,
   &#39;http://swapi.dev/api/films/5/&#39;,
   &#39;http://swapi.dev/api/films/6/&#39;],
  &#39;species&#39;: [&#39;http://swapi.dev/api/species/2/&#39;],
  &#39;vehicles&#39;: [],
  &#39;starships&#39;: [],
  &#39;created&#39;: &#39;2014-12-10T15:10:51.357000Z&#39;,
  &#39;edited&#39;: &#39;2014-12-20T21:17:50.309000Z&#39;,
  &#39;url&#39;: &#39;http://swapi.dev/api/people/2/&#39;},
............
............
............
 {&#39;name&#39;: &#39;Tion Medon&#39;,
  &#39;height&#39;: &#39;206&#39;,
  &#39;mass&#39;: &#39;80&#39;,
  &#39;hair_color&#39;: &#39;none&#39;,
  &#39;skin_color&#39;: &#39;grey&#39;,
  &#39;eye_color&#39;: &#39;black&#39;,
  &#39;birth_year&#39;: &#39;unknown&#39;,
  &#39;gender&#39;: &#39;male&#39;,
  &#39;homeworld&#39;: &#39;http://swapi.dev/api/planets/12/&#39;,
  &#39;films&#39;: [&#39;http://swapi.dev/api/films/6/&#39;],
  &#39;species&#39;: [&#39;http://swapi.dev/api/species/37/&#39;],
  &#39;vehicles&#39;: [],
  &#39;starships&#39;: [],
  &#39;created&#39;: &#39;2014-12-20T20:35:04.260000Z&#39;,
  &#39;edited&#39;: &#39;2014-12-20T21:17:50.498000Z&#39;,
  &#39;url&#39;: &#39;http://swapi.dev/api/people/83/&#39;}]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(people)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;82
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, I wrote a function to get nested film information.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_nested(d):
    &amp;quot;&amp;quot;&amp;quot;
    This function is to download nested film information in the api.
    
    Parameters
    ----------
    d: dict
    the json dict you downloaded
       
    Returns
    ----------
    d: dict  
    the nested json dict with additional film information
    
    &amp;quot;&amp;quot;&amp;quot;
    films_title=[]
    urls = d[&#39;films&#39;]
    films = [requests.get(url).json() for url in urls]
    
    for x in films:
        films_title.append( {&#39;title&#39; : x[&#39;title&#39;]} ) 
   
    d[&#39;films&#39;]  = films_title
    
    return d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for x in people:
    get_nested(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[{&#39;name&#39;: &#39;Luke Skywalker&#39;,
  &#39;height&#39;: &#39;172&#39;,
  &#39;mass&#39;: &#39;77&#39;,
  &#39;hair_color&#39;: &#39;blond&#39;,
  &#39;skin_color&#39;: &#39;fair&#39;,
  &#39;eye_color&#39;: &#39;blue&#39;,
  &#39;birth_year&#39;: &#39;19BBY&#39;,
  &#39;gender&#39;: &#39;male&#39;,
  &#39;homeworld&#39;: &#39;http://swapi.dev/api/planets/1/&#39;,
  &#39;films&#39;: [{&#39;title&#39;: &#39;A New Hope&#39;},
   {&#39;title&#39;: &#39;The Empire Strikes Back&#39;},
   {&#39;title&#39;: &#39;Return of the Jedi&#39;},
   {&#39;title&#39;: &#39;Revenge of the Sith&#39;}],
  &#39;species&#39;: [],
  &#39;vehicles&#39;: [&#39;http://swapi.dev/api/vehicles/14/&#39;,
   &#39;http://swapi.dev/api/vehicles/30/&#39;],
  &#39;starships&#39;: [&#39;http://swapi.dev/api/starships/12/&#39;,
   &#39;http://swapi.dev/api/starships/22/&#39;],
  &#39;created&#39;: &#39;2014-12-09T13:50:51.644000Z&#39;,
  &#39;edited&#39;: &#39;2014-12-20T21:17:56.891000Z&#39;,
  &#39;url&#39;: &#39;http://swapi.dev/api/people/1/&#39;},
 {&#39;name&#39;: &#39;C-3PO&#39;,
  &#39;height&#39;: &#39;167&#39;,
  &#39;mass&#39;: &#39;75&#39;,
  &#39;hair_color&#39;: &#39;n/a&#39;,
  &#39;skin_color&#39;: &#39;gold&#39;,
  &#39;eye_color&#39;: &#39;yellow&#39;,
  &#39;birth_year&#39;: &#39;112BBY&#39;,
  &#39;gender&#39;: &#39;n/a&#39;,
  &#39;homeworld&#39;: &#39;http://swapi.dev/api/planets/1/&#39;,
  &#39;films&#39;: [{&#39;title&#39;: &#39;A New Hope&#39;},
   {&#39;title&#39;: &#39;The Empire Strikes Back&#39;},
   {&#39;title&#39;: &#39;Return of the Jedi&#39;},
   {&#39;title&#39;: &#39;The Phantom Menace&#39;},
   {&#39;title&#39;: &#39;Attack of the Clones&#39;},
   {&#39;title&#39;: &#39;Revenge of the Sith&#39;}],
  &#39;species&#39;: [&#39;http://swapi.dev/api/species/2/&#39;],
  &#39;vehicles&#39;: [],
  &#39;starships&#39;: [],
  &#39;created&#39;: &#39;2014-12-10T15:10:51.357000Z&#39;,
  &#39;edited&#39;: &#39;2014-12-20T21:17:50.309000Z&#39;,
  &#39;url&#39;: &#39;http://swapi.dev/api/people/2/&#39;},
  ............
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-data-analysis&#34;&gt;2. Data analysis&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.json_normalize(people)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;height&lt;/th&gt;
      &lt;th&gt;mass&lt;/th&gt;
      &lt;th&gt;hair_color&lt;/th&gt;
      &lt;th&gt;skin_color&lt;/th&gt;
      &lt;th&gt;eye_color&lt;/th&gt;
      &lt;th&gt;birth_year&lt;/th&gt;
      &lt;th&gt;gender&lt;/th&gt;
      &lt;th&gt;homeworld&lt;/th&gt;
      &lt;th&gt;films&lt;/th&gt;
      &lt;th&gt;species&lt;/th&gt;
      &lt;th&gt;vehicles&lt;/th&gt;
      &lt;th&gt;starships&lt;/th&gt;
      &lt;th&gt;created&lt;/th&gt;
      &lt;th&gt;edited&lt;/th&gt;
      &lt;th&gt;url&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Luke Skywalker&lt;/td&gt;
      &lt;td&gt;172&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;blond&lt;/td&gt;
      &lt;td&gt;fair&lt;/td&gt;
      &lt;td&gt;blue&lt;/td&gt;
      &lt;td&gt;19BBY&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/1/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;A New Hope&#39;}, {&#39;title&#39;: &#39;The Empir...&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/vehicles/14/, http://swa...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/starships/12/, http://sw...&lt;/td&gt;
      &lt;td&gt;2014-12-09T13:50:51.644000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:56.891000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/1/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;C-3PO&lt;/td&gt;
      &lt;td&gt;167&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;gold&lt;/td&gt;
      &lt;td&gt;yellow&lt;/td&gt;
      &lt;td&gt;112BBY&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/1/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;A New Hope&#39;}, {&#39;title&#39;: &#39;The Empir...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/species/2/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-10T15:10:51.357000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.309000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/2/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;R2-D2&lt;/td&gt;
      &lt;td&gt;96&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;white, blue&lt;/td&gt;
      &lt;td&gt;red&lt;/td&gt;
      &lt;td&gt;33BBY&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/8/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;A New Hope&#39;}, {&#39;title&#39;: &#39;The Empir...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/species/2/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-10T15:11:50.376000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.311000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/3/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Darth Vader&lt;/td&gt;
      &lt;td&gt;202&lt;/td&gt;
      &lt;td&gt;136&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;white&lt;/td&gt;
      &lt;td&gt;yellow&lt;/td&gt;
      &lt;td&gt;41.9BBY&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/1/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;A New Hope&#39;}, {&#39;title&#39;: &#39;The Empir...&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/starships/13/]&lt;/td&gt;
      &lt;td&gt;2014-12-10T15:18:20.704000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.313000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/4/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Leia Organa&lt;/td&gt;
      &lt;td&gt;150&lt;/td&gt;
      &lt;td&gt;49&lt;/td&gt;
      &lt;td&gt;brown&lt;/td&gt;
      &lt;td&gt;light&lt;/td&gt;
      &lt;td&gt;brown&lt;/td&gt;
      &lt;td&gt;19BBY&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/2/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;A New Hope&#39;}, {&#39;title&#39;: &#39;The Empir...&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/vehicles/30/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-10T15:20:09.791000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.315000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/5/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;77&lt;/th&gt;
      &lt;td&gt;Grievous&lt;/td&gt;
      &lt;td&gt;216&lt;/td&gt;
      &lt;td&gt;159&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;brown, white&lt;/td&gt;
      &lt;td&gt;green, yellow&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/59/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;Revenge of the Sith&#39;}]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/species/36/]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/vehicles/60/]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/starships/74/]&lt;/td&gt;
      &lt;td&gt;2014-12-20T19:43:53.348000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.488000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/79/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;78&lt;/th&gt;
      &lt;td&gt;Tarfful&lt;/td&gt;
      &lt;td&gt;234&lt;/td&gt;
      &lt;td&gt;136&lt;/td&gt;
      &lt;td&gt;brown&lt;/td&gt;
      &lt;td&gt;brown&lt;/td&gt;
      &lt;td&gt;blue&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/14/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;Revenge of the Sith&#39;}]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/species/3/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-20T19:46:34.209000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.491000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/80/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;79&lt;/th&gt;
      &lt;td&gt;Raymus Antilles&lt;/td&gt;
      &lt;td&gt;188&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;brown&lt;/td&gt;
      &lt;td&gt;light&lt;/td&gt;
      &lt;td&gt;brown&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/2/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;A New Hope&#39;}, {&#39;title&#39;: &#39;Revenge o...&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-20T19:49:35.583000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.493000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/81/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;80&lt;/th&gt;
      &lt;td&gt;Sly Moore&lt;/td&gt;
      &lt;td&gt;178&lt;/td&gt;
      &lt;td&gt;48&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;pale&lt;/td&gt;
      &lt;td&gt;white&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/60/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;Attack of the Clones&#39;}, {&#39;title&#39;: ...&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-20T20:18:37.619000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.496000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/82/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;81&lt;/th&gt;
      &lt;td&gt;Tion Medon&lt;/td&gt;
      &lt;td&gt;206&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;grey&lt;/td&gt;
      &lt;td&gt;black&lt;/td&gt;
      &lt;td&gt;unknown&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/12/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;Revenge of the Sith&#39;}]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/species/37/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-20T20:35:04.260000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.498000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/83/&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;82 rows × 16 columns&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For the birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope.&lt;/p&gt;
&lt;p&gt;Thus, we should only look at those with BBY.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1 = df[df[&#39;birth_year&#39;].str.contains(&amp;quot;BBY&amp;quot;)]
df1.head(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;height&lt;/th&gt;
      &lt;th&gt;mass&lt;/th&gt;
      &lt;th&gt;hair_color&lt;/th&gt;
      &lt;th&gt;skin_color&lt;/th&gt;
      &lt;th&gt;eye_color&lt;/th&gt;
      &lt;th&gt;birth_year&lt;/th&gt;
      &lt;th&gt;gender&lt;/th&gt;
      &lt;th&gt;homeworld&lt;/th&gt;
      &lt;th&gt;films&lt;/th&gt;
      &lt;th&gt;species&lt;/th&gt;
      &lt;th&gt;vehicles&lt;/th&gt;
      &lt;th&gt;starships&lt;/th&gt;
      &lt;th&gt;created&lt;/th&gt;
      &lt;th&gt;edited&lt;/th&gt;
      &lt;th&gt;url&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Luke Skywalker&lt;/td&gt;
      &lt;td&gt;172&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;blond&lt;/td&gt;
      &lt;td&gt;fair&lt;/td&gt;
      &lt;td&gt;blue&lt;/td&gt;
      &lt;td&gt;19BBY&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/1/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;A New Hope&#39;}, {&#39;title&#39;: &#39;The Empir...&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/vehicles/14/, http://swa...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/starships/12/, http://sw...&lt;/td&gt;
      &lt;td&gt;2014-12-09T13:50:51.644000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:56.891000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/1/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;C-3PO&lt;/td&gt;
      &lt;td&gt;167&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;gold&lt;/td&gt;
      &lt;td&gt;yellow&lt;/td&gt;
      &lt;td&gt;112BBY&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/1/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;A New Hope&#39;}, {&#39;title&#39;: &#39;The Empir...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/species/2/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-10T15:10:51.357000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.309000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/2/&lt;/td&gt;
      &lt;/tr&gt;
        &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;​&lt;/p&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1[&#39;birth_year&#39;] = df1[&#39;birth_year&#39;].str.rstrip(&#39;BBY&#39;)
df1[&#39;birth_year&#39;] = pd.to_numeric(df1[&#39;birth_year&#39;])
df1.head(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;height&lt;/th&gt;
      &lt;th&gt;mass&lt;/th&gt;
      &lt;th&gt;hair_color&lt;/th&gt;
      &lt;th&gt;skin_color&lt;/th&gt;
      &lt;th&gt;eye_color&lt;/th&gt;
      &lt;th&gt;birth_year&lt;/th&gt;
      &lt;th&gt;gender&lt;/th&gt;
      &lt;th&gt;homeworld&lt;/th&gt;
      &lt;th&gt;films&lt;/th&gt;
      &lt;th&gt;species&lt;/th&gt;
      &lt;th&gt;vehicles&lt;/th&gt;
      &lt;th&gt;starships&lt;/th&gt;
      &lt;th&gt;created&lt;/th&gt;
      &lt;th&gt;edited&lt;/th&gt;
      &lt;th&gt;url&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Luke Skywalker&lt;/td&gt;
      &lt;td&gt;172&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;blond&lt;/td&gt;
      &lt;td&gt;fair&lt;/td&gt;
      &lt;td&gt;blue&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/1/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;A New Hope&#39;}, {&#39;title&#39;: &#39;The Empir...&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/vehicles/14/, http://swa...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/starships/12/, http://sw...&lt;/td&gt;
      &lt;td&gt;2014-12-09T13:50:51.644000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:56.891000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/1/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;C-3PO&lt;/td&gt;
      &lt;td&gt;167&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;gold&lt;/td&gt;
      &lt;td&gt;yellow&lt;/td&gt;
      &lt;td&gt;112&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/1/&lt;/td&gt;
      &lt;td&gt;[{&#39;title&#39;: &#39;A New Hope&#39;}, {&#39;title&#39;: &#39;The Empir...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/species/2/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-10T15:10:51.357000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.309000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/2/&lt;/td&gt;
      &lt;/tr&gt;
        &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1.loc[df1[&#39;birth_year&#39;].idxmax()][&#39;name&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Yoda&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1.loc[df1[&#39;birth_year&#39;].idxmax()]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;name                                                       Yoda
height                                                       66
mass                                                         17
hair_color                                                white
skin_color                                                green
eye_color                                                 brown
birth_year                                                  896
gender                                                     male
homeworld                      http://swapi.dev/api/planets/28/
films         [{&#39;title&#39;: &#39;The Empire Strikes Back&#39;}, {&#39;title...
species                       [http://swapi.dev/api/species/6/]
vehicles                                                     []
starships                                                    []
created                             2014-12-15T12:26:01.042000Z
edited                              2014-12-20T21:17:50.345000Z
url                             http://swapi.dev/api/people/20/
Name: 18, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Thus, the name of the oldest person (alien) is &lt;em&gt;Yoda&lt;/em&gt; and list the titles of all the films they appeared in is:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1.loc[df1[&#39;birth_year&#39;].idxmax()][&#39;films&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[{&#39;title&#39;: &#39;The Empire Strikes Back&#39;},
 {&#39;title&#39;: &#39;Return of the Jedi&#39;},
 {&#39;title&#39;: &#39;The Phantom Menace&#39;},
 {&#39;title&#39;: &#39;Attack of the Clones&#39;},
 {&#39;title&#39;: &#39;Revenge of the Sith&#39;}]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spotify dataset SQLite3 schema</title>
      <link>https://ZhuoranHou.github.io/project/spotify/</link>
      <pubDate>Wed, 30 Sep 2020 10:02:58 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/project/spotify/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to create a Spotify dataset SQLite3 schema</title>
      <link>https://ZhuoranHou.github.io/post/spotify/</link>
      <pubDate>Wed, 30 Sep 2020 10:02:37 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/post/spotify/</guid>
      <description>&lt;p&gt;The task is to download the Spotify songs data set. Create a SQLite3 schema to store this data in at least 3rd normal form (3NF), and populate the tables. Use an SQL query to find the names of all playlists that contain instrumentals. Dataset: 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-21/readme.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-21/readme.md&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-read-the-database&#34;&gt;1. Read the database&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;track_id&lt;/th&gt;
      &lt;th&gt;track_name&lt;/th&gt;
      &lt;th&gt;track_artist&lt;/th&gt;
      &lt;th&gt;track_popularity&lt;/th&gt;
      &lt;th&gt;track_album_id&lt;/th&gt;
      &lt;th&gt;track_album_name&lt;/th&gt;
      &lt;th&gt;track_album_release_date&lt;/th&gt;
      &lt;th&gt;playlist_name&lt;/th&gt;
      &lt;th&gt;playlist_id&lt;/th&gt;
      &lt;th&gt;playlist_genre&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;loudness&lt;/th&gt;
      &lt;th&gt;mode&lt;/th&gt;
      &lt;th&gt;speechiness&lt;/th&gt;
      &lt;th&gt;acousticness&lt;/th&gt;
      &lt;th&gt;instrumentalness&lt;/th&gt;
      &lt;th&gt;liveness&lt;/th&gt;
      &lt;th&gt;valence&lt;/th&gt;
      &lt;th&gt;tempo&lt;/th&gt;
      &lt;th&gt;duration_ms&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;6f807x0ima9a1j3VPbc7VN&lt;/td&gt;
      &lt;td&gt;I Don&#39;t Care (with Justin Bieber) - Loud Luxur...&lt;/td&gt;
      &lt;td&gt;Ed Sheeran&lt;/td&gt;
      &lt;td&gt;66&lt;/td&gt;
      &lt;td&gt;2oCs0DGTsRO98Gh5ZSl2Cx&lt;/td&gt;
      &lt;td&gt;I Don&#39;t Care (with Justin Bieber) [Loud Luxury...&lt;/td&gt;
      &lt;td&gt;2019-06-14&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;-2.634&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0583&lt;/td&gt;
      &lt;td&gt;0.102000&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.0653&lt;/td&gt;
      &lt;td&gt;0.5180&lt;/td&gt;
      &lt;td&gt;122.036&lt;/td&gt;
      &lt;td&gt;194754&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0r7CVbZTWZgbTCYdfa2P31&lt;/td&gt;
      &lt;td&gt;Memories - Dillon Francis Remix&lt;/td&gt;
      &lt;td&gt;Maroon 5&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;63rPSO264uRjW1X5E6cWv6&lt;/td&gt;
      &lt;td&gt;Memories (Dillon Francis Remix)&lt;/td&gt;
      &lt;td&gt;2019-12-13&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;-4.969&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0373&lt;/td&gt;
      &lt;td&gt;0.072400&lt;/td&gt;
      &lt;td&gt;0.004210&lt;/td&gt;
      &lt;td&gt;0.3570&lt;/td&gt;
      &lt;td&gt;0.6930&lt;/td&gt;
      &lt;td&gt;99.972&lt;/td&gt;
      &lt;td&gt;162600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1z1Hg7Vb0AhHDiEmnDE79l&lt;/td&gt;
      &lt;td&gt;All the Time - Don Diablo Remix&lt;/td&gt;
      &lt;td&gt;Zara Larsson&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;1HoSmj2eLcsrR0vE9gThr4&lt;/td&gt;
      &lt;td&gt;All the Time (Don Diablo Remix)&lt;/td&gt;
      &lt;td&gt;2019-07-05&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-3.432&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0.0742&lt;/td&gt;
      &lt;td&gt;0.079400&lt;/td&gt;
      &lt;td&gt;0.000023&lt;/td&gt;
      &lt;td&gt;0.1100&lt;/td&gt;
      &lt;td&gt;0.6130&lt;/td&gt;
      &lt;td&gt;124.008&lt;/td&gt;
      &lt;td&gt;176616&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;75FpbthrwQmzHlBJLuGdC7&lt;/td&gt;
      &lt;td&gt;Call You Mine - Keanu Silva Remix&lt;/td&gt;
      &lt;td&gt;The Chainsmokers&lt;/td&gt;
      &lt;td&gt;60&lt;/td&gt;
      &lt;td&gt;1nqYsOef1yKKuGOVchbsk6&lt;/td&gt;
      &lt;td&gt;Call You Mine - The Remixes&lt;/td&gt;
      &lt;td&gt;2019-07-19&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;-3.778&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.1020&lt;/td&gt;
      &lt;td&gt;0.028700&lt;/td&gt;
      &lt;td&gt;0.000009&lt;/td&gt;
      &lt;td&gt;0.2040&lt;/td&gt;
      &lt;td&gt;0.2770&lt;/td&gt;
      &lt;td&gt;121.956&lt;/td&gt;
      &lt;td&gt;169093&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1e8PAfcKUYoKkxPhrHqw4x&lt;/td&gt;
      &lt;td&gt;Someone You Loved - Future Humans Remix&lt;/td&gt;
      &lt;td&gt;Lewis Capaldi&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;7m7vv9wlQ4i0LFuJiE2zsQ&lt;/td&gt;
      &lt;td&gt;Someone You Loved (Future Humans Remix)&lt;/td&gt;
      &lt;td&gt;2019-03-05&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-4.672&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0359&lt;/td&gt;
      &lt;td&gt;0.080300&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.0833&lt;/td&gt;
      &lt;td&gt;0.7250&lt;/td&gt;
      &lt;td&gt;123.976&lt;/td&gt;
      &lt;td&gt;189052&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32828&lt;/th&gt;
      &lt;td&gt;7bxnKAamR3snQ1VGLuVfC1&lt;/td&gt;
      &lt;td&gt;City Of Lights - Official Radio Edit&lt;/td&gt;
      &lt;td&gt;Lush &amp;amp; Simon&lt;/td&gt;
      &lt;td&gt;42&lt;/td&gt;
      &lt;td&gt;2azRoBBWEEEYhqV6sb7JrT&lt;/td&gt;
      &lt;td&gt;City Of Lights (Vocal Mix)&lt;/td&gt;
      &lt;td&gt;2014-04-28&lt;/td&gt;
      &lt;td&gt;♥ EDM LOVE 2020&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
      &lt;td&gt;edm&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;-1.814&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0936&lt;/td&gt;
      &lt;td&gt;0.076600&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.0668&lt;/td&gt;
      &lt;td&gt;0.2100&lt;/td&gt;
      &lt;td&gt;128.170&lt;/td&gt;
      &lt;td&gt;204375&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32829&lt;/th&gt;
      &lt;td&gt;5Aevni09Em4575077nkWHz&lt;/td&gt;
      &lt;td&gt;Closer - Sultan &amp;amp; Ned Shepard Remix&lt;/td&gt;
      &lt;td&gt;Tegan and Sara&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;6kD6KLxj7s8eCE3ABvAyf5&lt;/td&gt;
      &lt;td&gt;Closer Remixed&lt;/td&gt;
      &lt;td&gt;2013-03-08&lt;/td&gt;
      &lt;td&gt;♥ EDM LOVE 2020&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
      &lt;td&gt;edm&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;-4.462&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0420&lt;/td&gt;
      &lt;td&gt;0.001710&lt;/td&gt;
      &lt;td&gt;0.004270&lt;/td&gt;
      &lt;td&gt;0.3750&lt;/td&gt;
      &lt;td&gt;0.4000&lt;/td&gt;
      &lt;td&gt;128.041&lt;/td&gt;
      &lt;td&gt;353120&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32830&lt;/th&gt;
      &lt;td&gt;7ImMqPP3Q1yfUHvsdn7wEo&lt;/td&gt;
      &lt;td&gt;Sweet Surrender - Radio Edit&lt;/td&gt;
      &lt;td&gt;Starkillers&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;0ltWNSY9JgxoIZO4VzuCa6&lt;/td&gt;
      &lt;td&gt;Sweet Surrender (Radio Edit)&lt;/td&gt;
      &lt;td&gt;2014-04-21&lt;/td&gt;
      &lt;td&gt;♥ EDM LOVE 2020&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
      &lt;td&gt;edm&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;-4.899&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0.0481&lt;/td&gt;
      &lt;td&gt;0.108000&lt;/td&gt;
      &lt;td&gt;0.000001&lt;/td&gt;
      &lt;td&gt;0.1500&lt;/td&gt;
      &lt;td&gt;0.4360&lt;/td&gt;
      &lt;td&gt;127.989&lt;/td&gt;
      &lt;td&gt;210112&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32831&lt;/th&gt;
      &lt;td&gt;2m69mhnfQ1Oq6lGtXuYhgX&lt;/td&gt;
      &lt;td&gt;Only For You - Maor Levi Remix&lt;/td&gt;
      &lt;td&gt;Mat Zo&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;1fGrOkHnHJcStl14zNx8Jy&lt;/td&gt;
      &lt;td&gt;Only For You (Remixes)&lt;/td&gt;
      &lt;td&gt;2014-01-01&lt;/td&gt;
      &lt;td&gt;♥ EDM LOVE 2020&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
      &lt;td&gt;edm&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;-3.361&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.1090&lt;/td&gt;
      &lt;td&gt;0.007920&lt;/td&gt;
      &lt;td&gt;0.127000&lt;/td&gt;
      &lt;td&gt;0.3430&lt;/td&gt;
      &lt;td&gt;0.3080&lt;/td&gt;
      &lt;td&gt;128.008&lt;/td&gt;
      &lt;td&gt;367432&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32832&lt;/th&gt;
      &lt;td&gt;29zWqhca3zt5NsckZqDf6c&lt;/td&gt;
      &lt;td&gt;Typhoon - Original Mix&lt;/td&gt;
      &lt;td&gt;Julian Calor&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;0X3mUOm6MhxR7PzxG95rAo&lt;/td&gt;
      &lt;td&gt;Typhoon/Storm&lt;/td&gt;
      &lt;td&gt;2014-03-03&lt;/td&gt;
      &lt;td&gt;♥ EDM LOVE 2020&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
      &lt;td&gt;edm&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;-4.571&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0.0385&lt;/td&gt;
      &lt;td&gt;0.000133&lt;/td&gt;
      &lt;td&gt;0.341000&lt;/td&gt;
      &lt;td&gt;0.7420&lt;/td&gt;
      &lt;td&gt;0.0894&lt;/td&gt;
      &lt;td&gt;127.984&lt;/td&gt;
      &lt;td&gt;337500&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;32833 rows × 23 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(32833, 23)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Index([&#39;track_id&#39;, &#39;track_name&#39;, &#39;track_artist&#39;, &#39;track_popularity&#39;,
       &#39;track_album_id&#39;, &#39;track_album_name&#39;, &#39;track_album_release_date&#39;,
       &#39;playlist_name&#39;, &#39;playlist_id&#39;, &#39;playlist_genre&#39;, &#39;playlist_subgenre&#39;,
       &#39;danceability&#39;, &#39;energy&#39;, &#39;key&#39;, &#39;loudness&#39;, &#39;mode&#39;, &#39;speechiness&#39;,
       &#39;acousticness&#39;, &#39;instrumentalness&#39;, &#39;liveness&#39;, &#39;valence&#39;, &#39;tempo&#39;,
       &#39;duration_ms&#39;],
      dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-first-normal-form-1nf&#34;&gt;2. First Normal Form (1NF)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Table has a primary key (unique, non-null column that identifies each row)&lt;/li&gt;
&lt;li&gt;No repeating groups of columns&lt;/li&gt;
&lt;li&gt;Each cell contains a single value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;It seems that the database is already 1NF.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-second-normal-form-2nf--third-normal-form-3nf&#34;&gt;3. Second Normal Form (2NF) &amp;amp; Third Normal Form (3NF)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Break partial dependencies&lt;/li&gt;
&lt;li&gt;Remove transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_songs = df.iloc[:, [0,1,2,3]].drop_duplicates()
df_songs
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;track_id&lt;/th&gt;
      &lt;th&gt;track_name&lt;/th&gt;
      &lt;th&gt;track_artist&lt;/th&gt;
      &lt;th&gt;track_popularity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;6f807x0ima9a1j3VPbc7VN&lt;/td&gt;
      &lt;td&gt;I Don&#39;t Care (with Justin Bieber) - Loud Luxur...&lt;/td&gt;
      &lt;td&gt;Ed Sheeran&lt;/td&gt;
      &lt;td&gt;66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0r7CVbZTWZgbTCYdfa2P31&lt;/td&gt;
      &lt;td&gt;Memories - Dillon Francis Remix&lt;/td&gt;
      &lt;td&gt;Maroon 5&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1z1Hg7Vb0AhHDiEmnDE79l&lt;/td&gt;
      &lt;td&gt;All the Time - Don Diablo Remix&lt;/td&gt;
      &lt;td&gt;Zara Larsson&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;75FpbthrwQmzHlBJLuGdC7&lt;/td&gt;
      &lt;td&gt;Call You Mine - Keanu Silva Remix&lt;/td&gt;
      &lt;td&gt;The Chainsmokers&lt;/td&gt;
      &lt;td&gt;60&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1e8PAfcKUYoKkxPhrHqw4x&lt;/td&gt;
      &lt;td&gt;Someone You Loved - Future Humans Remix&lt;/td&gt;
      &lt;td&gt;Lewis Capaldi&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32828&lt;/th&gt;
      &lt;td&gt;7bxnKAamR3snQ1VGLuVfC1&lt;/td&gt;
      &lt;td&gt;City Of Lights - Official Radio Edit&lt;/td&gt;
      &lt;td&gt;Lush &amp;amp; Simon&lt;/td&gt;
      &lt;td&gt;42&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32829&lt;/th&gt;
      &lt;td&gt;5Aevni09Em4575077nkWHz&lt;/td&gt;
      &lt;td&gt;Closer - Sultan &amp;amp; Ned Shepard Remix&lt;/td&gt;
      &lt;td&gt;Tegan and Sara&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32830&lt;/th&gt;
      &lt;td&gt;7ImMqPP3Q1yfUHvsdn7wEo&lt;/td&gt;
      &lt;td&gt;Sweet Surrender - Radio Edit&lt;/td&gt;
      &lt;td&gt;Starkillers&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32831&lt;/th&gt;
      &lt;td&gt;2m69mhnfQ1Oq6lGtXuYhgX&lt;/td&gt;
      &lt;td&gt;Only For You - Maor Levi Remix&lt;/td&gt;
      &lt;td&gt;Mat Zo&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32832&lt;/th&gt;
      &lt;td&gt;29zWqhca3zt5NsckZqDf6c&lt;/td&gt;
      &lt;td&gt;Typhoon - Original Mix&lt;/td&gt;
      &lt;td&gt;Julian Calor&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;28356 rows × 4 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_albums = df.iloc[:, [4,5,6]].drop_duplicates()
df_albums
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;track_album_id&lt;/th&gt;
      &lt;th&gt;track_album_name&lt;/th&gt;
      &lt;th&gt;track_album_release_date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2oCs0DGTsRO98Gh5ZSl2Cx&lt;/td&gt;
      &lt;td&gt;I Don&#39;t Care (with Justin Bieber) [Loud Luxury...&lt;/td&gt;
      &lt;td&gt;2019-06-14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;63rPSO264uRjW1X5E6cWv6&lt;/td&gt;
      &lt;td&gt;Memories (Dillon Francis Remix)&lt;/td&gt;
      &lt;td&gt;2019-12-13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1HoSmj2eLcsrR0vE9gThr4&lt;/td&gt;
      &lt;td&gt;All the Time (Don Diablo Remix)&lt;/td&gt;
      &lt;td&gt;2019-07-05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1nqYsOef1yKKuGOVchbsk6&lt;/td&gt;
      &lt;td&gt;Call You Mine - The Remixes&lt;/td&gt;
      &lt;td&gt;2019-07-19&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;7m7vv9wlQ4i0LFuJiE2zsQ&lt;/td&gt;
      &lt;td&gt;Someone You Loved (Future Humans Remix)&lt;/td&gt;
      &lt;td&gt;2019-03-05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32828&lt;/th&gt;
      &lt;td&gt;2azRoBBWEEEYhqV6sb7JrT&lt;/td&gt;
      &lt;td&gt;City Of Lights (Vocal Mix)&lt;/td&gt;
      &lt;td&gt;2014-04-28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32829&lt;/th&gt;
      &lt;td&gt;6kD6KLxj7s8eCE3ABvAyf5&lt;/td&gt;
      &lt;td&gt;Closer Remixed&lt;/td&gt;
      &lt;td&gt;2013-03-08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32830&lt;/th&gt;
      &lt;td&gt;0ltWNSY9JgxoIZO4VzuCa6&lt;/td&gt;
      &lt;td&gt;Sweet Surrender (Radio Edit)&lt;/td&gt;
      &lt;td&gt;2014-04-21&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32831&lt;/th&gt;
      &lt;td&gt;1fGrOkHnHJcStl14zNx8Jy&lt;/td&gt;
      &lt;td&gt;Only For You (Remixes)&lt;/td&gt;
      &lt;td&gt;2014-01-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32832&lt;/th&gt;
      &lt;td&gt;0X3mUOm6MhxR7PzxG95rAo&lt;/td&gt;
      &lt;td&gt;Typhoon/Storm&lt;/td&gt;
      &lt;td&gt;2014-03-03&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;22545 rows × 3 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_playlist = df.iloc[:, [7,8,9,10]].drop_duplicates()
df_playlist
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;playlist_name&lt;/th&gt;
      &lt;th&gt;playlist_id&lt;/th&gt;
      &lt;th&gt;playlist_genre&lt;/th&gt;
      &lt;th&gt;playlist_subgenre&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;70&lt;/th&gt;
      &lt;td&gt;Dance Pop&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DWZQaaqNMbbXa&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;167&lt;/th&gt;
      &lt;td&gt;Dance Room&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DX2ENAPP1Tyed&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;223&lt;/th&gt;
      &lt;td&gt;Cardio&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DWSJHnPb1f0X3&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;272&lt;/th&gt;
      &lt;td&gt;Dance Pop Hits&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DX6pH08wMhkaI&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32409&lt;/th&gt;
      &lt;td&gt;Fresh EDM | Progressive House | Electro House ...&lt;/td&gt;
      &lt;td&gt;0FCHg9zJMNNiOokh3hVcxd&lt;/td&gt;
      &lt;td&gt;edm&lt;/td&gt;
      &lt;td&gt;progressive electro house&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32504&lt;/th&gt;
      &lt;td&gt;Festival Music 2019 - Warm Up Music (EDM, Big ...&lt;/td&gt;
      &lt;td&gt;73uj4YmsC7SJ6SbUMTvf07&lt;/td&gt;
      &lt;td&gt;edm&lt;/td&gt;
      &lt;td&gt;progressive electro house&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32582&lt;/th&gt;
      &lt;td&gt;Underground Party | Hypnotic | Minimal | Acid ...&lt;/td&gt;
      &lt;td&gt;29jj7pQlDqnWclbHQk21Rq&lt;/td&gt;
      &lt;td&gt;edm&lt;/td&gt;
      &lt;td&gt;progressive electro house&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32674&lt;/th&gt;
      &lt;td&gt;Trending EDM by Nik Cooper&lt;/td&gt;
      &lt;td&gt;4N1ipiKR3xla8UXtE12XBm&lt;/td&gt;
      &lt;td&gt;edm&lt;/td&gt;
      &lt;td&gt;progressive electro house&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32753&lt;/th&gt;
      &lt;td&gt;♥ EDM LOVE 2020&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
      &lt;td&gt;edm&lt;/td&gt;
      &lt;td&gt;progressive electro house&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;480 rows × 4 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_attri = df.iloc[:, [0,11,12,13,14,15,16,17,18,19,20,21,22]].drop_duplicates()
df_attri
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;track_id&lt;/th&gt;
      &lt;th&gt;danceability&lt;/th&gt;
      &lt;th&gt;energy&lt;/th&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;loudness&lt;/th&gt;
      &lt;th&gt;mode&lt;/th&gt;
      &lt;th&gt;speechiness&lt;/th&gt;
      &lt;th&gt;acousticness&lt;/th&gt;
      &lt;th&gt;instrumentalness&lt;/th&gt;
      &lt;th&gt;liveness&lt;/th&gt;
      &lt;th&gt;valence&lt;/th&gt;
      &lt;th&gt;tempo&lt;/th&gt;
      &lt;th&gt;duration_ms&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;6f807x0ima9a1j3VPbc7VN&lt;/td&gt;
      &lt;td&gt;0.748&lt;/td&gt;
      &lt;td&gt;0.916&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;-2.634&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0583&lt;/td&gt;
      &lt;td&gt;0.102000&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.0653&lt;/td&gt;
      &lt;td&gt;0.5180&lt;/td&gt;
      &lt;td&gt;122.036&lt;/td&gt;
      &lt;td&gt;194754&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0r7CVbZTWZgbTCYdfa2P31&lt;/td&gt;
      &lt;td&gt;0.726&lt;/td&gt;
      &lt;td&gt;0.815&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;-4.969&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0373&lt;/td&gt;
      &lt;td&gt;0.072400&lt;/td&gt;
      &lt;td&gt;0.004210&lt;/td&gt;
      &lt;td&gt;0.3570&lt;/td&gt;
      &lt;td&gt;0.6930&lt;/td&gt;
      &lt;td&gt;99.972&lt;/td&gt;
      &lt;td&gt;162600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1z1Hg7Vb0AhHDiEmnDE79l&lt;/td&gt;
      &lt;td&gt;0.675&lt;/td&gt;
      &lt;td&gt;0.931&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-3.432&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0.0742&lt;/td&gt;
      &lt;td&gt;0.079400&lt;/td&gt;
      &lt;td&gt;0.000023&lt;/td&gt;
      &lt;td&gt;0.1100&lt;/td&gt;
      &lt;td&gt;0.6130&lt;/td&gt;
      &lt;td&gt;124.008&lt;/td&gt;
      &lt;td&gt;176616&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;75FpbthrwQmzHlBJLuGdC7&lt;/td&gt;
      &lt;td&gt;0.718&lt;/td&gt;
      &lt;td&gt;0.930&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;-3.778&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.1020&lt;/td&gt;
      &lt;td&gt;0.028700&lt;/td&gt;
      &lt;td&gt;0.000009&lt;/td&gt;
      &lt;td&gt;0.2040&lt;/td&gt;
      &lt;td&gt;0.2770&lt;/td&gt;
      &lt;td&gt;121.956&lt;/td&gt;
      &lt;td&gt;169093&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1e8PAfcKUYoKkxPhrHqw4x&lt;/td&gt;
      &lt;td&gt;0.650&lt;/td&gt;
      &lt;td&gt;0.833&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-4.672&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0359&lt;/td&gt;
      &lt;td&gt;0.080300&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.0833&lt;/td&gt;
      &lt;td&gt;0.7250&lt;/td&gt;
      &lt;td&gt;123.976&lt;/td&gt;
      &lt;td&gt;189052&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32828&lt;/th&gt;
      &lt;td&gt;7bxnKAamR3snQ1VGLuVfC1&lt;/td&gt;
      &lt;td&gt;0.428&lt;/td&gt;
      &lt;td&gt;0.922&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;-1.814&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0936&lt;/td&gt;
      &lt;td&gt;0.076600&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.0668&lt;/td&gt;
      &lt;td&gt;0.2100&lt;/td&gt;
      &lt;td&gt;128.170&lt;/td&gt;
      &lt;td&gt;204375&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32829&lt;/th&gt;
      &lt;td&gt;5Aevni09Em4575077nkWHz&lt;/td&gt;
      &lt;td&gt;0.522&lt;/td&gt;
      &lt;td&gt;0.786&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;-4.462&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0420&lt;/td&gt;
      &lt;td&gt;0.001710&lt;/td&gt;
      &lt;td&gt;0.004270&lt;/td&gt;
      &lt;td&gt;0.3750&lt;/td&gt;
      &lt;td&gt;0.4000&lt;/td&gt;
      &lt;td&gt;128.041&lt;/td&gt;
      &lt;td&gt;353120&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32830&lt;/th&gt;
      &lt;td&gt;7ImMqPP3Q1yfUHvsdn7wEo&lt;/td&gt;
      &lt;td&gt;0.529&lt;/td&gt;
      &lt;td&gt;0.821&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;-4.899&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0.0481&lt;/td&gt;
      &lt;td&gt;0.108000&lt;/td&gt;
      &lt;td&gt;0.000001&lt;/td&gt;
      &lt;td&gt;0.1500&lt;/td&gt;
      &lt;td&gt;0.4360&lt;/td&gt;
      &lt;td&gt;127.989&lt;/td&gt;
      &lt;td&gt;210112&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32831&lt;/th&gt;
      &lt;td&gt;2m69mhnfQ1Oq6lGtXuYhgX&lt;/td&gt;
      &lt;td&gt;0.626&lt;/td&gt;
      &lt;td&gt;0.888&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;-3.361&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.1090&lt;/td&gt;
      &lt;td&gt;0.007920&lt;/td&gt;
      &lt;td&gt;0.127000&lt;/td&gt;
      &lt;td&gt;0.3430&lt;/td&gt;
      &lt;td&gt;0.3080&lt;/td&gt;
      &lt;td&gt;128.008&lt;/td&gt;
      &lt;td&gt;367432&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32832&lt;/th&gt;
      &lt;td&gt;29zWqhca3zt5NsckZqDf6c&lt;/td&gt;
      &lt;td&gt;0.603&lt;/td&gt;
      &lt;td&gt;0.884&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;-4.571&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0.0385&lt;/td&gt;
      &lt;td&gt;0.000133&lt;/td&gt;
      &lt;td&gt;0.341000&lt;/td&gt;
      &lt;td&gt;0.7420&lt;/td&gt;
      &lt;td&gt;0.0894&lt;/td&gt;
      &lt;td&gt;127.984&lt;/td&gt;
      &lt;td&gt;337500&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;28356 rows × 13 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_songs_albums = df.iloc[:, [0, 4]].drop_duplicates()  ## link table
df_songs_albums
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;track_id&lt;/th&gt;
      &lt;th&gt;track_album_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;6f807x0ima9a1j3VPbc7VN&lt;/td&gt;
      &lt;td&gt;2oCs0DGTsRO98Gh5ZSl2Cx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0r7CVbZTWZgbTCYdfa2P31&lt;/td&gt;
      &lt;td&gt;63rPSO264uRjW1X5E6cWv6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1z1Hg7Vb0AhHDiEmnDE79l&lt;/td&gt;
      &lt;td&gt;1HoSmj2eLcsrR0vE9gThr4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;75FpbthrwQmzHlBJLuGdC7&lt;/td&gt;
      &lt;td&gt;1nqYsOef1yKKuGOVchbsk6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1e8PAfcKUYoKkxPhrHqw4x&lt;/td&gt;
      &lt;td&gt;7m7vv9wlQ4i0LFuJiE2zsQ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32828&lt;/th&gt;
      &lt;td&gt;7bxnKAamR3snQ1VGLuVfC1&lt;/td&gt;
      &lt;td&gt;2azRoBBWEEEYhqV6sb7JrT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32829&lt;/th&gt;
      &lt;td&gt;5Aevni09Em4575077nkWHz&lt;/td&gt;
      &lt;td&gt;6kD6KLxj7s8eCE3ABvAyf5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32830&lt;/th&gt;
      &lt;td&gt;7ImMqPP3Q1yfUHvsdn7wEo&lt;/td&gt;
      &lt;td&gt;0ltWNSY9JgxoIZO4VzuCa6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32831&lt;/th&gt;
      &lt;td&gt;2m69mhnfQ1Oq6lGtXuYhgX&lt;/td&gt;
      &lt;td&gt;1fGrOkHnHJcStl14zNx8Jy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32832&lt;/th&gt;
      &lt;td&gt;29zWqhca3zt5NsckZqDf6c&lt;/td&gt;
      &lt;td&gt;0X3mUOm6MhxR7PzxG95rAo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;28356 rows × 2 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_songs_playlist = df.iloc[:, [0, 8]].drop_duplicates()  ## link table
df_songs_playlist
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;track_id&lt;/th&gt;
      &lt;th&gt;playlist_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;6f807x0ima9a1j3VPbc7VN&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0r7CVbZTWZgbTCYdfa2P31&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1z1Hg7Vb0AhHDiEmnDE79l&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;75FpbthrwQmzHlBJLuGdC7&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1e8PAfcKUYoKkxPhrHqw4x&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32828&lt;/th&gt;
      &lt;td&gt;7bxnKAamR3snQ1VGLuVfC1&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32829&lt;/th&gt;
      &lt;td&gt;5Aevni09Em4575077nkWHz&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32830&lt;/th&gt;
      &lt;td&gt;7ImMqPP3Q1yfUHvsdn7wEo&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32831&lt;/th&gt;
      &lt;td&gt;2m69mhnfQ1Oq6lGtXuYhgX&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32832&lt;/th&gt;
      &lt;td&gt;29zWqhca3zt5NsckZqDf6c&lt;/td&gt;
      &lt;td&gt;6jI1gFr6ANFtT8MmTvA2Ux&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;32251 rows × 2 columns&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;4-create-a-sqlite3-schema-to-store-this-data&#34;&gt;4. Create a SQLite3 schema to store this data&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

conn = sqlite3.connect(&#39;SpotifyDB.db&#39;)  # You can create a new database by changing the name within the quotes
c = conn.cursor() # The database will be saved in the location where your &#39;py&#39; file is saved

df_songs.to_sql(&#39;songs&#39;, conn, if_exists=&#39;append&#39;, index = False) # Insert the values from the dataframe into the table &#39;songs&#39; 
df_albums.to_sql(&#39;albums&#39;, conn, if_exists=&#39;append&#39;, index = False)
df_playlist.to_sql(&#39;playlist&#39;, conn, if_exists=&#39;append&#39;, index = False)
df_attri.to_sql(&#39;attri&#39;, conn, if_exists=&#39;append&#39;, index = False)
df_songs_albums.to_sql(&#39;songs_albums&#39;, conn, if_exists=&#39;append&#39;, index = False)
df_songs_playlist.to_sql(&#39;songs_playlist&#39;, conn, if_exists=&#39;append&#39;, index = False)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5use-an-sql-query-to-find-the-names-of-all-playlists-that-contain-instrumentals&#34;&gt;5.Use an SQL query to find the names of all playlists that contain instrumentals&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%load_ext sql
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The sql extension is already loaded. To reload it, use:
  %reload_ext sql
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%sql sqlite:///SpotifyDB.db
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Connected: @SpotifyDB.db&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%sql

SELECT * FROM sqlite_master WHERE type=&#39;table&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   sqlite://
 * sqlite:///SpotifyDB.db
Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;type&lt;/th&gt;
        &lt;th&gt;name&lt;/th&gt;
        &lt;th&gt;tbl_name&lt;/th&gt;
        &lt;th&gt;rootpage&lt;/th&gt;
        &lt;th&gt;sql&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;table&lt;/td&gt;
        &lt;td&gt;songs&lt;/td&gt;
        &lt;td&gt;songs&lt;/td&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;CREATE TABLE &amp;quot;songs&amp;quot; (&lt;br&gt;&amp;quot;track_id&amp;quot; TEXT,&lt;br&gt;  &amp;quot;track_name&amp;quot; TEXT,&lt;br&gt;  &amp;quot;track_artist&amp;quot; TEXT,&lt;br&gt;  &amp;quot;track_popularity&amp;quot; INTEGER&lt;br&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;table&lt;/td&gt;
        &lt;td&gt;albums&lt;/td&gt;
        &lt;td&gt;albums&lt;/td&gt;
        &lt;td&gt;1288&lt;/td&gt;
        &lt;td&gt;CREATE TABLE &amp;quot;albums&amp;quot; (&lt;br&gt;&amp;quot;track_album_id&amp;quot; TEXT,&lt;br&gt;  &amp;quot;track_album_name&amp;quot; TEXT,&lt;br&gt;  &amp;quot;track_album_release_date&amp;quot; TEXT&lt;br&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;table&lt;/td&gt;
        &lt;td&gt;playlist&lt;/td&gt;
        &lt;td&gt;playlist&lt;/td&gt;
        &lt;td&gt;2374&lt;/td&gt;
        &lt;td&gt;CREATE TABLE &amp;quot;playlist&amp;quot; (&lt;br&gt;&amp;quot;playlist_name&amp;quot; TEXT,&lt;br&gt;  &amp;quot;playlist_id&amp;quot; TEXT,&lt;br&gt;  &amp;quot;playlist_genre&amp;quot; TEXT,&lt;br&gt;  &amp;quot;playlist_subgenre&amp;quot; TEXT&lt;br&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;table&lt;/td&gt;
        &lt;td&gt;attri&lt;/td&gt;
        &lt;td&gt;attri&lt;/td&gt;
        &lt;td&gt;2384&lt;/td&gt;
        &lt;td&gt;CREATE TABLE &amp;quot;attri&amp;quot; (&lt;br&gt;&amp;quot;track_id&amp;quot; TEXT,&lt;br&gt;  &amp;quot;danceability&amp;quot; REAL,&lt;br&gt;  &amp;quot;energy&amp;quot; REAL,&lt;br&gt;  &amp;quot;key&amp;quot; INTEGER,&lt;br&gt;  &amp;quot;loudness&amp;quot; REAL,&lt;br&gt;  &amp;quot;mode&amp;quot; INTEGER,&lt;br&gt;  &amp;quot;speechiness&amp;quot; REAL,&lt;br&gt;  &amp;quot;acousticness&amp;quot; REAL,&lt;br&gt;  &amp;quot;instrumentalness&amp;quot; REAL,&lt;br&gt;  &amp;quot;liveness&amp;quot; REAL,&lt;br&gt;  &amp;quot;valence&amp;quot; REAL,&lt;br&gt;  &amp;quot;tempo&amp;quot; REAL,&lt;br&gt;  &amp;quot;duration_ms&amp;quot; INTEGER&lt;br&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;table&lt;/td&gt;
        &lt;td&gt;songs_albums&lt;/td&gt;
        &lt;td&gt;songs_albums&lt;/td&gt;
        &lt;td&gt;3191&lt;/td&gt;
        &lt;td&gt;CREATE TABLE &amp;quot;songs_albums&amp;quot; (&lt;br&gt;&amp;quot;track_id&amp;quot; TEXT,&lt;br&gt;  &amp;quot;track_album_id&amp;quot; TEXT&lt;br&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;table&lt;/td&gt;
        &lt;td&gt;songs_playlist&lt;/td&gt;
        &lt;td&gt;songs_playlist&lt;/td&gt;
        &lt;td&gt;3558&lt;/td&gt;
        &lt;td&gt;CREATE TABLE &amp;quot;songs_playlist&amp;quot; (&lt;br&gt;&amp;quot;track_id&amp;quot; TEXT,&lt;br&gt;  &amp;quot;playlist_id&amp;quot; TEXT&lt;br&gt;)&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;According to the definition of instrumentalness:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Here, we use 0.5 as the threshold of if the song contains instrumentals&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%sql 

Select DISTINCT playlist_name
From songs
Inner join attri
    ON songs.track_id = attri.track_id
Inner join songs_playlist
    ON songs.track_id = songs_playlist.track_id
Inner join playlist
    ON songs_playlist.playlist_id = playlist.playlist_id
Where instrumentalness &amp;gt; 0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   sqlite://
 * sqlite:///SpotifyDB.db
Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;playlist_name&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Pop Remix&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Dance Room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Pop Warmup 130 BPM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Dance Pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Dance Pop Tunes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Pop / Dance&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Most Popular 2020 TOP 50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;post-teen alternative, indie, pop (large variety)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Todo Éxitos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Charts 2020 🔥Top 2020🔥Hits 2020🔥Summer 2020🔥Pop 2020🔥Popular Music🔥Clean Pop 2020🔥Sing Alongs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2020 Hits &amp;amp; 2019  Hits – Top Global Tracks 🔥🔥🔥&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Pop Hits 2020&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Music&amp;amp;Other Drugs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;90s Dance Hits&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;CHRISTIAN ELECTRO / DANCE / EDM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Christian Dance Party&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;........&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;EDM/POP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Selected House&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Vocal House&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Electro/Progressive/Club House&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Underground Party | Hypnotic | Minimal | Acid | Big Room | Tech | Liquid&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Malaria Datasets Visualizations</title>
      <link>https://ZhuoranHou.github.io/project/malaria_visual/</link>
      <pubDate>Tue, 29 Sep 2020 22:09:52 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/project/malaria_visual/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Malaria datasets visualizations</title>
      <link>https://ZhuoranHou.github.io/post/malaria_dataset_visualizations/</link>
      <pubDate>Tue, 29 Sep 2020 21:51:08 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/post/malaria_dataset_visualizations/</guid>
      <description>&lt;p&gt;In this blog, I visualized three malaria datasets using Python. The datasets are from here: 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-11-13&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-11-13&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
import matplotlib.pyplot as plt  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import seaborn as sns 
import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I first find a outside database about the continent information of countries, which I used in the following visualizations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df0 = pd.read_csv(&amp;quot;https://datahub.io/JohnSnowLabs/country-and-continent-codes-list/r/country-and-continent-codes-list-csv.csv&amp;quot;)
df0
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Continent_Name&lt;/th&gt;
      &lt;th&gt;Continent_Code&lt;/th&gt;
      &lt;th&gt;Country_Name&lt;/th&gt;
      &lt;th&gt;Two_Letter_Country_Code&lt;/th&gt;
      &lt;th&gt;Three_Letter_Country_Code&lt;/th&gt;
      &lt;th&gt;Country_Number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;AS&lt;/td&gt;
      &lt;td&gt;Afghanistan, Islamic Republic of&lt;/td&gt;
      &lt;td&gt;AF&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Europe&lt;/td&gt;
      &lt;td&gt;EU&lt;/td&gt;
      &lt;td&gt;Albania, Republic of&lt;/td&gt;
      &lt;td&gt;AL&lt;/td&gt;
      &lt;td&gt;ALB&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Antarctica&lt;/td&gt;
      &lt;td&gt;AN&lt;/td&gt;
      &lt;td&gt;Antarctica (the territory South of 60 deg S)&lt;/td&gt;
      &lt;td&gt;AQ&lt;/td&gt;
      &lt;td&gt;ATA&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;AF&lt;/td&gt;
      &lt;td&gt;Algeria, People&#39;s Democratic Republic of&lt;/td&gt;
      &lt;td&gt;DZ&lt;/td&gt;
      &lt;td&gt;DZA&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Oceania&lt;/td&gt;
      &lt;td&gt;OC&lt;/td&gt;
      &lt;td&gt;American Samoa&lt;/td&gt;
      &lt;td&gt;AS&lt;/td&gt;
      &lt;td&gt;ASM&lt;/td&gt;
      &lt;td&gt;16.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;257&lt;/th&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;AF&lt;/td&gt;
      &lt;td&gt;Zambia, Republic of&lt;/td&gt;
      &lt;td&gt;ZM&lt;/td&gt;
      &lt;td&gt;ZMB&lt;/td&gt;
      &lt;td&gt;894.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;258&lt;/th&gt;
      &lt;td&gt;Oceania&lt;/td&gt;
      &lt;td&gt;OC&lt;/td&gt;
      &lt;td&gt;Disputed Territory&lt;/td&gt;
      &lt;td&gt;XX&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;259&lt;/th&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;AS&lt;/td&gt;
      &lt;td&gt;Iraq-Saudi Arabia Neutral Zone&lt;/td&gt;
      &lt;td&gt;XE&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;260&lt;/th&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;AS&lt;/td&gt;
      &lt;td&gt;United Nations Neutral Zone&lt;/td&gt;
      &lt;td&gt;XD&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;261&lt;/th&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;AS&lt;/td&gt;
      &lt;td&gt;Spratly Islands&lt;/td&gt;
      &lt;td&gt;XS&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;262 rows × 6 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dfc = (
    df0.iloc[:,[0,4]].
    dropna(subset=[&#39;Three_Letter_Country_Code&#39;]).
    drop_duplicates(subset=[&#39;Three_Letter_Country_Code&#39;])
)

dfc
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Continent_Name&lt;/th&gt;
      &lt;th&gt;Three_Letter_Country_Code&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Europe&lt;/td&gt;
      &lt;td&gt;ALB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Antarctica&lt;/td&gt;
      &lt;td&gt;ATA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;DZA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Oceania&lt;/td&gt;
      &lt;td&gt;ASM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;253&lt;/th&gt;
      &lt;td&gt;South America&lt;/td&gt;
      &lt;td&gt;VEN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;254&lt;/th&gt;
      &lt;td&gt;Oceania&lt;/td&gt;
      &lt;td&gt;WLF&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;255&lt;/th&gt;
      &lt;td&gt;Oceania&lt;/td&gt;
      &lt;td&gt;WSM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;256&lt;/th&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;YEM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;257&lt;/th&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;ZMB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;250 rows × 2 columns&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;1-malaria-deaths-by-country-for-all-ages-across-the-world-and-time&#34;&gt;1. Malaria deaths by country for all ages across the world and time.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Read the dataset&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1 = pd.read_csv(&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-11-13/malaria_deaths.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1 = df1.dropna(subset=[&#39;Code&#39;]) ## drop those are not countries
df1 = df1[df1[&#39;Entity&#39;] != &#39;World&#39;]  ## delete whole world data
df1
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Entity&lt;/th&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Deaths - Malaria - Sex: Both - Age: Age-standardized (Rate) (per 100,000 people)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1990&lt;/td&gt;
      &lt;td&gt;6.802930&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1991&lt;/td&gt;
      &lt;td&gt;6.973494&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1992&lt;/td&gt;
      &lt;td&gt;6.989882&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1993&lt;/td&gt;
      &lt;td&gt;7.088983&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1994&lt;/td&gt;
      &lt;td&gt;7.392472&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6151&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2012&lt;/td&gt;
      &lt;td&gt;9.751727&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6152&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;9.419939&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6153&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2014&lt;/td&gt;
      &lt;td&gt;9.487453&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6154&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;9.440046&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6155&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2016&lt;/td&gt;
      &lt;td&gt;9.507309&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5265 rows × 4 columns&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Rename the column names&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1.columns=[&#39;Entity&#39;, &#39;Code&#39;, &#39;Year&#39;,&#39;Mortality rate&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Choose top ten countries with the highest mean mortality rate from 1990 to 2016&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1_m = ( 
    df1.groupby(by=&amp;quot;Entity&amp;quot;).agg(&#39;mean&#39;).
    sort_values(by=&#39;Mortality rate&#39;,ascending=False).
    iloc[:10,1:].copy()
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1_m = df1_m.reset_index().copy()
df1_m
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Entity&lt;/th&gt;
      &lt;th&gt;Mortality rate&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Sierra Leone&lt;/td&gt;
      &lt;td&gt;181.658950&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;169.667275&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;147.281621&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Equatorial Guinea&lt;/td&gt;
      &lt;td&gt;142.713265&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Cote d&#39;Ivoire&lt;/td&gt;
      &lt;td&gt;140.610546&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;135.902567&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Niger&lt;/td&gt;
      &lt;td&gt;135.766525&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Democratic Republic of Congo&lt;/td&gt;
      &lt;td&gt;134.571369&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Burundi&lt;/td&gt;
      &lt;td&gt;131.296440&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;Mali&lt;/td&gt;
      &lt;td&gt;122.955185&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1_m[&#39;Entity&#39;][7] = &amp;quot;DR Congo&amp;quot;
df1_m
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Entity&lt;/th&gt;
      &lt;th&gt;Mortality rate&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Sierra Leone&lt;/td&gt;
      &lt;td&gt;181.658950&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;169.667275&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;147.281621&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Equatorial Guinea&lt;/td&gt;
      &lt;td&gt;142.713265&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Cote d&#39;Ivoire&lt;/td&gt;
      &lt;td&gt;140.610546&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;135.902567&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Niger&lt;/td&gt;
      &lt;td&gt;135.766525&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;DR Congo&lt;/td&gt;
      &lt;td&gt;134.571369&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Burundi&lt;/td&gt;
      &lt;td&gt;131.296440&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;Mali&lt;/td&gt;
      &lt;td&gt;122.955185&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Plot the bar plot&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(1, 1, figsize=(10,4))

g1 = sns.barplot(x=&#39;Entity&#39;, y=&#39;Mortality rate&#39;, data=df1_m)
labels = df1_m[&#39;Entity&#39;]
g1.set_xticklabels(labels,rotation=-45)
plt.title(&#39;Top ten countries with the highest mean mortality rate from 1990 to 2016&#39;)

pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_19_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plot the trend of mortality rate of these ten countries&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1_ss = df1[df1[&#39;Entity&#39;].isin(df1_m[&#39;Entity&#39;])].copy()
df1_ss
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Entity&lt;/th&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Mortality rate&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;810&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;BFA&lt;/td&gt;
      &lt;td&gt;1990&lt;/td&gt;
      &lt;td&gt;148.890249&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;811&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;BFA&lt;/td&gt;
      &lt;td&gt;1991&lt;/td&gt;
      &lt;td&gt;154.470849&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;812&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;BFA&lt;/td&gt;
      &lt;td&gt;1992&lt;/td&gt;
      &lt;td&gt;158.051907&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;813&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;BFA&lt;/td&gt;
      &lt;td&gt;1993&lt;/td&gt;
      &lt;td&gt;162.043022&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;814&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;BFA&lt;/td&gt;
      &lt;td&gt;1994&lt;/td&gt;
      &lt;td&gt;164.068758&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5692&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;UGA&lt;/td&gt;
      &lt;td&gt;2012&lt;/td&gt;
      &lt;td&gt;69.818389&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5693&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;UGA&lt;/td&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;54.161004&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5694&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;UGA&lt;/td&gt;
      &lt;td&gt;2014&lt;/td&gt;
      &lt;td&gt;48.320006&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5695&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;UGA&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;50.672187&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5696&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;UGA&lt;/td&gt;
      &lt;td&gt;2016&lt;/td&gt;
      &lt;td&gt;49.232941&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;243 rows × 4 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(1, 1, figsize=(15,8))
sns.lineplot(x=&#39;Year&#39;, y=&#39;Mortality rate&#39;,hue = &#39;Entity&#39; , data=df1_ss)
plt.title(&#39;Mortality rate for top ten countries with the highest mortality rate from 1990 to 2016&#39;)
plt.legend(loc=&#39;best&#39;, fontsize=10)
pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_22_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-malaria-deaths-by-age-across-the-world-and-time&#34;&gt;2. Malaria deaths by age across the world and time.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Read the dataset&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2 = pd.read_csv(&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-11-13/malaria_deaths_age.csv&#39;,index_col = 0)
df2
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;entity&lt;/th&gt;
      &lt;th&gt;code&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;age_group&lt;/th&gt;
      &lt;th&gt;deaths&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1990&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;184.606435&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1991&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;191.658193&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1992&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;197.140197&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1993&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;207.357753&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1994&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;226.209363&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30776&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2012&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;103.185111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30777&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;100.113293&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30778&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2014&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;99.013890&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30779&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;98.091738&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30780&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2016&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;97.402058&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;30780 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2 = df2.dropna(subset=[&#39;code&#39;]) ## drop those are not countries
df2 = df2[df2[&#39;entity&#39;] != &#39;World&#39;]  ## delete whole world data
df2
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;entity&lt;/th&gt;
      &lt;th&gt;code&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;age_group&lt;/th&gt;
      &lt;th&gt;deaths&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1990&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;184.606435&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1991&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;191.658193&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1992&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;197.140197&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1993&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;207.357753&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;1994&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;226.209363&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30776&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2012&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;103.185111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30777&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;100.113293&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30778&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2014&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;99.013890&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30779&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;98.091738&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30780&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2016&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;97.402058&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;26325 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;choose top ten countries with most death cases&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2_t2 = df2[df2[&#39;entity&#39;].isin(df2_t[&#39;entity&#39;])].copy()
df2_t2
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;entity&lt;/th&gt;
      &lt;th&gt;code&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;age_group&lt;/th&gt;
      &lt;th&gt;deaths&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;811&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;BFA&lt;/td&gt;
      &lt;td&gt;1990&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;18239.856090&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;812&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;BFA&lt;/td&gt;
      &lt;td&gt;1991&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;19262.190962&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;813&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;BFA&lt;/td&gt;
      &lt;td&gt;1992&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;20171.050076&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;814&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;BFA&lt;/td&gt;
      &lt;td&gt;1993&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;21023.473688&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;815&lt;/th&gt;
      &lt;td&gt;Burkina Faso&lt;/td&gt;
      &lt;td&gt;BFA&lt;/td&gt;
      &lt;td&gt;1994&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;21625.799178&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30317&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;UGA&lt;/td&gt;
      &lt;td&gt;2012&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;1223.126262&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30318&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;UGA&lt;/td&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;1000.050301&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30319&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;UGA&lt;/td&gt;
      &lt;td&gt;2014&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;949.020874&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30320&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;UGA&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;1083.887084&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;30321&lt;/th&gt;
      &lt;td&gt;Uganda&lt;/td&gt;
      &lt;td&gt;UGA&lt;/td&gt;
      &lt;td&gt;2016&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;1086.361351&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1350 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2_t2.loc[df2_t2[&#39;entity&#39;] == &#39;Democratic Republic of Congo&#39;,&#39;entity&#39;] = &#39;DR Congo&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2_t3 = df2_t2.groupby(by=[&amp;quot;entity&amp;quot;,&amp;quot;age_group&amp;quot;]).agg(&#39;mean&#39;).iloc[:,[1]].unstack(&#39;age_group&#39;)
df2_t3.columns = [&#39;15-49&#39;,&#39;5-14&#39;,&#39;50-69&#39;,&#39;70 or older&#39;,&#39;Under 5&#39;]
df2_t3
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;15-49&lt;/th&gt;
      &lt;th&gt;5-14&lt;/th&gt;
      &lt;th&gt;50-69&lt;/th&gt;
      &lt;th&gt;70 or older&lt;/th&gt;
      &lt;th&gt;Under 5&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;entity&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Burkina Faso&lt;/th&gt;
      &lt;td&gt;1440.986219&lt;/td&gt;
      &lt;td&gt;2180.110659&lt;/td&gt;
      &lt;td&gt;949.531799&lt;/td&gt;
      &lt;td&gt;616.307888&lt;/td&gt;
      &lt;td&gt;27090.929143&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Cameroon&lt;/th&gt;
      &lt;td&gt;1841.799877&lt;/td&gt;
      &lt;td&gt;2087.751841&lt;/td&gt;
      &lt;td&gt;1260.056940&lt;/td&gt;
      &lt;td&gt;843.155975&lt;/td&gt;
      &lt;td&gt;18920.406820&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Cote d&#39;Ivoire&lt;/th&gt;
      &lt;td&gt;2435.445658&lt;/td&gt;
      &lt;td&gt;2707.015515&lt;/td&gt;
      &lt;td&gt;1540.863000&lt;/td&gt;
      &lt;td&gt;961.537118&lt;/td&gt;
      &lt;td&gt;19893.376484&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;DR Congo&lt;/th&gt;
      &lt;td&gt;5865.025596&lt;/td&gt;
      &lt;td&gt;7418.616598&lt;/td&gt;
      &lt;td&gt;3738.726743&lt;/td&gt;
      &lt;td&gt;2173.788505&lt;/td&gt;
      &lt;td&gt;78082.393657&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;India&lt;/th&gt;
      &lt;td&gt;7467.822952&lt;/td&gt;
      &lt;td&gt;12800.418534&lt;/td&gt;
      &lt;td&gt;4570.759705&lt;/td&gt;
      &lt;td&gt;2180.711296&lt;/td&gt;
      &lt;td&gt;33569.693452&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Mozambique&lt;/th&gt;
      &lt;td&gt;1768.206804&lt;/td&gt;
      &lt;td&gt;2589.157880&lt;/td&gt;
      &lt;td&gt;942.746073&lt;/td&gt;
      &lt;td&gt;646.568790&lt;/td&gt;
      &lt;td&gt;24264.110234&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Niger&lt;/th&gt;
      &lt;td&gt;1049.787630&lt;/td&gt;
      &lt;td&gt;1951.445501&lt;/td&gt;
      &lt;td&gt;754.023705&lt;/td&gt;
      &lt;td&gt;476.335101&lt;/td&gt;
      &lt;td&gt;21820.324927&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Nigeria&lt;/th&gt;
      &lt;td&gt;9019.184357&lt;/td&gt;
      &lt;td&gt;17961.554380&lt;/td&gt;
      &lt;td&gt;6505.248814&lt;/td&gt;
      &lt;td&gt;4558.828812&lt;/td&gt;
      &lt;td&gt;213128.814854&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tanzania&lt;/th&gt;
      &lt;td&gt;2282.382476&lt;/td&gt;
      &lt;td&gt;2561.401544&lt;/td&gt;
      &lt;td&gt;1270.799946&lt;/td&gt;
      &lt;td&gt;814.388226&lt;/td&gt;
      &lt;td&gt;24197.304098&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Uganda&lt;/th&gt;
      &lt;td&gt;3213.540577&lt;/td&gt;
      &lt;td&gt;4041.199036&lt;/td&gt;
      &lt;td&gt;1844.906441&lt;/td&gt;
      &lt;td&gt;1290.584647&lt;/td&gt;
      &lt;td&gt;40908.586984&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2_t3.plot(kind=&#39;bar&#39;, stacked=True,figsize=(15, 10),rot = -45, title = &amp;quot;Malaria Year Deaths means by age group from top ten countries with most death cases &amp;quot;)
pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_31_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose Nigeria to see the trend of death cases across countries&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2_nig = df2[df2[&#39;entity&#39;] == &#39;Nigeria&#39; ].copy()
df2_nig
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;entity&lt;/th&gt;
      &lt;th&gt;code&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;age_group&lt;/th&gt;
      &lt;th&gt;deaths&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;3889&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;NGA&lt;/td&gt;
      &lt;td&gt;1990&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;169612.233561&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3890&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;NGA&lt;/td&gt;
      &lt;td&gt;1991&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;177084.049314&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3891&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;NGA&lt;/td&gt;
      &lt;td&gt;1992&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;182532.593757&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3892&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;NGA&lt;/td&gt;
      &lt;td&gt;1993&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;189569.206430&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3893&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;NGA&lt;/td&gt;
      &lt;td&gt;1994&lt;/td&gt;
      &lt;td&gt;Under 5&lt;/td&gt;
      &lt;td&gt;194656.088044&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;28535&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;NGA&lt;/td&gt;
      &lt;td&gt;2012&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;6362.466362&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;28536&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;NGA&lt;/td&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;6225.805881&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;28537&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;NGA&lt;/td&gt;
      &lt;td&gt;2014&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;6309.529067&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;28538&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;NGA&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;6436.740885&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;28539&lt;/th&gt;
      &lt;td&gt;Nigeria&lt;/td&gt;
      &lt;td&gt;NGA&lt;/td&gt;
      &lt;td&gt;2016&lt;/td&gt;
      &lt;td&gt;50-69&lt;/td&gt;
      &lt;td&gt;6489.088313&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;135 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(1, 1, figsize=(15,8))
sns.lineplot(x=&#39;year&#39;, y=&#39;deaths&#39;,hue = &#39;age_group&#39;, hue_order = [&#39;Under 5&#39;,&#39;5-14&#39;,&#39;15-49&#39;,&#39;50-69&#39;,&#39;70 or older&#39;] , data=df2_nig)
plt.title(&#39;Malaria Deaths Rate in Nigeria by age group from 1990 to 2016&#39;)
plt.legend(loc=&#39;best&#39;, fontsize=10)
pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_34_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-malaria-incidence-by-country-for-all-ages-across-the-world-across-time&#34;&gt;3. Malaria incidence by country for all ages across the world across time&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Read dataset&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3 = pd.read_csv(&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-11-13/malaria_inc.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Entity&lt;/th&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Incidence of malaria (per 1,000 population at risk) (per 1,000 population at risk)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;107.100000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;46.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;23.900000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;23.600000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Algeria&lt;/td&gt;
      &lt;td&gt;DZA&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;0.037746&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;503&lt;/th&gt;
      &lt;td&gt;Zambia&lt;/td&gt;
      &lt;td&gt;ZMB&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;173.700000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;504&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;143.200000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;505&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;142.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;506&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;129.600000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;507&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;114.200000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;508 rows × 4 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3 = df3.dropna(subset=[&#39;Code&#39;]) ## drop those are not countries
df3 = df3[df3[&#39;Entity&#39;] != &#39;World&#39;]  ## delete whole world data
df3
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Entity&lt;/th&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Incidence of malaria (per 1,000 population at risk) (per 1,000 population at risk)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;107.100000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;46.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;23.900000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;23.600000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Algeria&lt;/td&gt;
      &lt;td&gt;DZA&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;0.037746&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;503&lt;/th&gt;
      &lt;td&gt;Zambia&lt;/td&gt;
      &lt;td&gt;ZMB&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;173.700000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;504&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;143.200000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;505&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;142.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;506&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;129.600000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;507&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;114.200000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;396 rows × 4 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3.columns=[&#39;Entity&#39;, &#39;Code&#39;, &#39;Year&#39;, &#39;Incidence of malaria&#39;]
df3
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Entity&lt;/th&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Incidence of malaria&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;107.100000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;46.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;23.900000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;23.600000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Algeria&lt;/td&gt;
      &lt;td&gt;DZA&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;0.037746&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;503&lt;/th&gt;
      &lt;td&gt;Zambia&lt;/td&gt;
      &lt;td&gt;ZMB&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;173.700000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;504&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;143.200000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;505&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;142.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;506&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;129.600000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;507&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;114.200000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;396 rows × 4 columns&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Join the table with the Continents table&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3_1 = df3.merge(dfc,left_on = &#39;Code&#39;, right_on = &#39;Three_Letter_Country_Code&#39;, how = &#39;left&#39; )
df3_1
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Entity&lt;/th&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Incidence of malaria&lt;/th&gt;
      &lt;th&gt;Continent_Name&lt;/th&gt;
      &lt;th&gt;Three_Letter_Country_Code&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;107.100000&lt;/td&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;46.500000&lt;/td&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;23.900000&lt;/td&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Afghanistan&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;23.600000&lt;/td&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;AFG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Algeria&lt;/td&gt;
      &lt;td&gt;DZA&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;0.037746&lt;/td&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;DZA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;391&lt;/th&gt;
      &lt;td&gt;Zambia&lt;/td&gt;
      &lt;td&gt;ZMB&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;173.700000&lt;/td&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;ZMB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;392&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;143.200000&lt;/td&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;393&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;142.500000&lt;/td&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;394&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;129.600000&lt;/td&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;395&lt;/th&gt;
      &lt;td&gt;Zimbabwe&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;114.200000&lt;/td&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;ZWE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;396 rows × 6 columns&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Plot the trend of Mean Malaria Incidence for different Continents from 2000 to 2015&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3_2 = df3_1.groupby(by=[&amp;quot;Continent_Name&amp;quot;,&amp;quot;Year&amp;quot;]).agg(&#39;mean&#39;).reset_index()
df3_2
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Continent_Name&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Incidence of malaria&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;323.941229&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;267.446852&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;215.629814&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Africa&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;173.338338&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;58.626923&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;42.831822&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;22.113422&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;6.034621&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Europe&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;590.066667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;Europe&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;102.033333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;Europe&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;0.166667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;Europe&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;North America&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;15.070000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;13&lt;/th&gt;
      &lt;td&gt;North America&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;11.170000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;14&lt;/th&gt;
      &lt;td&gt;North America&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;3.803387&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;15&lt;/th&gt;
      &lt;td&gt;North America&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;1.960527&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;16&lt;/th&gt;
      &lt;td&gt;Oceania&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;293.666667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;17&lt;/th&gt;
      &lt;td&gt;Oceania&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;277.666667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;18&lt;/th&gt;
      &lt;td&gt;Oceania&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;132.633333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt;Oceania&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;64.166667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;20&lt;/th&gt;
      &lt;td&gt;South America&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;65.060000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;21&lt;/th&gt;
      &lt;td&gt;South America&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;50.880000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;22&lt;/th&gt;
      &lt;td&gt;South America&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;23.220000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;23&lt;/th&gt;
      &lt;td&gt;South America&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;15.620000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(1, 1, figsize=(15,8))
sns.lineplot(x=&#39;Year&#39;, y=&#39;Incidence of malaria&#39;,hue = &#39;Continent_Name&#39; , data=df3_2)
plt.title(&#39;Mean Malaria Incidence for different Continents from 2000 to 2015&#39;)
plt.legend(loc=&#39;best&#39;, fontsize=10)
pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_45_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Euler</title>
      <link>https://ZhuoranHou.github.io/project/project_euler/</link>
      <pubDate>Fri, 04 Sep 2020 10:13:56 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/project/project_euler/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Project Euler</title>
      <link>https://ZhuoranHou.github.io/post/project_euler/</link>
      <pubDate>Fri, 04 Sep 2020 09:56:49 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/post/project_euler/</guid>
      <description>&lt;p&gt;&lt;strong&gt;I solved these question using Python. Here are these questions and my solutions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Problem 5 Smallest multiple&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Solved by 489287 (2020/09/03)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanations &amp;amp; Answers:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since if this number can be evenly divisible by numbers from 11 to 20, it must can be evenly divisible by numbers from 11 to 20. So we only need to check 11-20.&lt;/p&gt;
&lt;p&gt;I wrote two loops with a inside loop checking if the remainder equals to zero and a outside loop checking numbers in the given range. ”div“ is the value indicating the status of divisibility of the number. If  &amp;ldquo;div == 1&amp;rdquo; , then print the value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def smallest_mul(n,a,b):
    &amp;quot;&amp;quot;&amp;quot;
    This function calculate the smallest positive number that is evenly divisible by all of the numbers from given interval

    :param n: range of largest number tested.
    :param a: lower bound of the range of divisors.
    :param b: upper bound of the range of divisors.
    
    output: print the number that meet the criterion in the test range.
    
    &amp;quot;&amp;quot;&amp;quot;
    
    for x in range(1,n):
        for i in range(a,b+1):
            div = 0
            if x % i != 0:
                div = 1
                break
        if div == 0:
            print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Two examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;smallest_mul(n=6000,a=1,b=10)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2520&lt;/p&gt;
&lt;p&gt;5040&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;smallest_mul(n=300000000,a=11,b=20)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;232792560&lt;/p&gt;
&lt;p&gt;Thus, the answer to is question is &lt;strong&gt;232792560&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 34 Digit factorials&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145. Find the sum of all numbers which are equal to the sum of the factorial of their digits. Note: As 1! = 1 and 2! = 2 are not sums they are not included.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Solved by 92955 (2020/09/03)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanations &amp;amp; Answers:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We first try to find the searching range of &amp;ldquo;curious number&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math
math.factorial(9)*8
math.factorial(9)*7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2903040&lt;/p&gt;
&lt;p&gt;2540160&lt;/p&gt;
&lt;p&gt;From the calculation above, we know that the numbers we search have at most 7 digits. For those have more digits, the sum of digit factorial will not be equal to the number itself.&lt;/p&gt;
&lt;p&gt;Here is the function that calculate the sum digit factorial of a given number. I first extracted each digit ((num // 10**(n-1)) % 10) and sum all the digit factorials.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def digsum(num):
    &amp;quot;&amp;quot;&amp;quot;
    This function calculate the factorial sum of all digits of a number

    :param num: the input number
    
    output: return the sum of digit factorial
    
    &amp;quot;&amp;quot;&amp;quot;
    
    sumf = 0
    for n in range(1,len(str(num))+1):
        sumf += math.factorial((num // 10**(n-1)) % 10)
    
    return sumf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sumd = 0
for x in range(3,10000000):
    if x == digsum(x):
        print(x)
        sumd += digsum(x)

print(f&amp;quot;The sum of all numbers which are equal to the sum of the factorial of their digits is {sumd}.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;145&lt;/p&gt;
&lt;p&gt;40585&lt;/p&gt;
&lt;p&gt;The sum of all numbers which are equal to the sum of the factorial of their digits is 40730.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;digsum(145)+digsum(40585)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;40730&lt;/p&gt;
&lt;p&gt;Thus, the answer to this question is &lt;strong&gt;40730&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 112 Bouncy numbers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Working from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, 134468.&lt;/p&gt;
&lt;p&gt;Similarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, 66420.&lt;/p&gt;
&lt;p&gt;We shall call a positive integer that is neither increasing nor decreasing a &amp;ldquo;bouncy&amp;rdquo; number; for example, 155349.&lt;/p&gt;
&lt;p&gt;Clearly there cannot be any bouncy numbers below one-hundred, but just over half of the numbers below one-thousand (525) are bouncy. In fact, the least number for which the proportion of bouncy numbers first reaches 50% is 538.&lt;/p&gt;
&lt;p&gt;Surprisingly, bouncy numbers become more and more common and by the time we reach 21780 the proportion of bouncy numbers is equal to 90%.&lt;/p&gt;
&lt;p&gt;Find the least number for which the proportion of bouncy numbers is exactly 99%.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Solved by 23655 (2020/09/03)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanations &amp;amp; Answers:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, I wrote a function to check if the number given is a bouncy number. If it is a bouncy number, then return &amp;ldquo;True&amp;rdquo;, otherwise &amp;ldquo;False&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def check_b(num):
    &amp;quot;&amp;quot;&amp;quot;
    This function is to check if the number is a bouncy number
    
    :param num: the input number
    
    output: return the boolean Values
    
    &amp;quot;&amp;quot;&amp;quot;
    nums = [0]*len(str(num))
    sta1 = True
    sta2 = True
    for n in range(1,len(str(num))+1):
        nums[n-1] = (num // 10**(n-1)) % 10
    
    for n in range(1,len(str(num))):
        if nums[n-1] &amp;lt; nums[n]:
            sta1 = False
        if nums[n-1] &amp;gt; nums[n]:
            sta2 = False

    return not(sta1 | sta2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, I wrote a while loop to find least number for which the proportion of bouncy numbers is exactly 99%.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;l = 0
x = 1

while True:
    if check_b(x):
        l += 1
    if l/x == 0.99:
        break
    x += 1
            
print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1587000&lt;/p&gt;
&lt;p&gt;Thus, the answer to this question is &lt;strong&gt;1587000&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to build a personal website using Github and Hugo</title>
      <link>https://ZhuoranHou.github.io/post/how-to-build-personal-website/</link>
      <pubDate>Thu, 20 Aug 2020 17:28:41 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/post/how-to-build-personal-website/</guid>
      <description>&lt;h3 id=&#34;1pelican-vs-hugo&#34;&gt;1.Pelican vs. Hugo&lt;/h3&gt;
&lt;p&gt;These are two static site generators. On GitHub, Pelican has &lt;em&gt;9.8k&lt;/em&gt; stars while Hugo has &lt;em&gt;46.1k&lt;/em&gt;, indicating Hugo is much more popular (2020/08/20).Thus, I chose Hugo as my static site generator since it is much likely to have more technical support.&lt;/p&gt;
&lt;h3 id=&#34;2install-hugo&#34;&gt;2.Install Hugo&lt;/h3&gt;
&lt;p&gt;After making the choice, I started to install the Hugo software on my windows 10 machine. I first downloaded &lt;strong&gt;hugo_extended_0.74.3_Windows-64bit.zip&lt;/strong&gt; at 
&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo releases&lt;/a&gt; and installed it according to the tutorials[2].&lt;/p&gt;
&lt;h3 id=&#34;3create-a-working-directory&#34;&gt;3.Create a working directory&lt;/h3&gt;
&lt;p&gt;Under the &lt;em&gt;Sites&lt;/em&gt; (according to [2]) folder,  I used Hugo to create a framework of the website by the code below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo new site personal_website
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After this, there was several files generated and these are the bases of the website.&lt;/p&gt;
&lt;h3 id=&#34;4choose-a-theme&#34;&gt;4.Choose a theme.&lt;/h3&gt;
&lt;p&gt;After the previous step, I started to choose a theme for my personal page on 
&lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo Themes&lt;/a&gt; website.  I chose the &lt;strong&gt;Academic&lt;/strong&gt; theme, which provide many very sophisticated website templates and detailed tutorials[3]. I followed the 
&lt;a href=&#34;https://wowchemy.com/docs/install-locally/#install-with-git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tutorial&lt;/a&gt; and used the following commands to overwrite the files in the &lt;em&gt;personal_website&lt;/em&gt; folder. You should first fork the original repository (
&lt;a href=&#34;https://github.com/wowchemy/starter-academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;academic-kickstart&lt;/a&gt;), clone your fork to the local PC and then initialize the theme by the command below (I had to say that I forgot to fork the repository first, and when I found it I almost finished the website):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/username/academic-kickstart.git
$ git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5edit-the-framework-and-customize-it&#34;&gt;5.Edit the framework and customize it&lt;/h3&gt;
&lt;p&gt;This step took most of my time. The framework consists of several parts: home, publication, project and post. For the basic information of the website, I mainly edited files such as: &lt;em&gt;config/_default/params.toml&lt;/em&gt; , &lt;em&gt;config/_default/config.toml&lt;/em&gt;, &lt;em&gt;config/_default/menus.toml&lt;/em&gt; , &lt;em&gt;content/authors/admin/_index.md&lt;/em&gt; . These contribute to the biography part of the personal website. I did this mainly based on this 
&lt;a href=&#34;https://wowchemy.com/docs/get-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tutorial&lt;/a&gt; [4].  The content part (publication, project and post) is mainly based on this 
&lt;a href=&#34;https://wowchemy.com/docs/managing-content/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tutorial&lt;/a&gt; [5].&lt;/p&gt;
&lt;h3 id=&#34;6deploy-on-site-on-github&#34;&gt;6.Deploy on site on GitHub&lt;/h3&gt;
&lt;p&gt;During the local website construction process, I already uploaded my code to GitHub several times. It is always a good habit to commit the code to the repository once you make some small changes.&lt;/p&gt;
&lt;p&gt;I first created two empty repositories on my GitHub account:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;a repository called 
&lt;a href=&#34;https://github.com/ZhuoranHou/personal_website&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;personal_website&lt;/a&gt; : store the Hugo code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a repository called 
&lt;a href=&#34;https://github.com/ZhuoranHou/ZhuoranHou.github.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ZhuoranHou.github.io&lt;/a&gt; : store the website code generated by Hugo.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, I committed and pushed my local code under &lt;em&gt;personal_website&lt;/em&gt; to the GitHub repository 
&lt;a href=&#34;https://github.com/ZhuoranHou/personal_website&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;personal_website&lt;/a&gt;. Afterwards, I changed the directory to the &lt;em&gt;Sites&lt;/em&gt; folder, and typed the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:ZhuoranHou/ZhuoranHou.github.io.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then changed the directory to the folder &lt;em&gt;personal_website&lt;/em&gt; and typed this to deploy my website:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo -d ../ZhuoranHou.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Afterwards, when I pushed the local &lt;em&gt;ZhuoranHou.github.io&lt;/em&gt; folder to the GitHub repository, the 
&lt;a href=&#34;https://zhuoranhou.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;personal website&lt;/a&gt; was successfully deployed.&lt;/p&gt;
&lt;p&gt;Every time I made changes locally under the folder &lt;em&gt;personal_website&lt;/em&gt;, I had to use the &lt;em&gt;hugo -d&lt;/em&gt; command again to deploy the website and push it the GitHub repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1 
&lt;a href=&#34;https://www.tomasbeuzen.com/post/making-a-website-with-hugo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.tomasbeuzen.com/post/making-a-website-with-hugo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 
&lt;a href=&#34;https://www.gohugo.org/doc/tutorials/installing-on-windows/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.gohugo.org/doc/tutorials/installing-on-windows/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3 
&lt;a href=&#34;https://wowchemy.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://wowchemy.com/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4 
&lt;a href=&#34;https://wowchemy.com/docs/get-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://wowchemy.com/docs/get-started/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 
&lt;a href=&#34;https://wowchemy.com/docs/managing-content/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://wowchemy.com/docs/managing-content/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Personal website</title>
      <link>https://ZhuoranHou.github.io/project/personal/</link>
      <pubDate>Thu, 20 Aug 2020 17:05:40 -0400</pubDate>
      <guid>https://ZhuoranHou.github.io/project/personal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Association of depressive symptoms with decline of cognitive function—Rugao longevity and ageing study</title>
      <link>https://ZhuoranHou.github.io/publication/hou-2020-association/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://ZhuoranHou.github.io/publication/hou-2020-association/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Association study of depression symptoms and cognition impairment in Rugao Longevity and ageing study</title>
      <link>https://ZhuoranHou.github.io/publication/hou-2019-association/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://ZhuoranHou.github.io/publication/hou-2019-association/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Effects of Poly IC induced prenatal immune challenge and maternal deprivation on Schizophrenia-related behavior in adult mice offspring</title>
      <link>https://ZhuoranHou.github.io/publication/wang-2017-poly/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://ZhuoranHou.github.io/publication/wang-2017-poly/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Comparative study of the P2X gene family in animals and plants</title>
      <link>https://ZhuoranHou.github.io/publication/hou-2016-comparative/</link>
      <pubDate>Fri, 05 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://ZhuoranHou.github.io/publication/hou-2016-comparative/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
